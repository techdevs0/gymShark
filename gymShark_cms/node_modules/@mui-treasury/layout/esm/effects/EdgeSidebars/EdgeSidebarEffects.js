import { createPermanentSidebarEffect } from '../PermanentSidebar';
import { createPersistentSidebarEffect } from '../PersistentSidebar';
import { isPermanentSidebarConfig, isPersistentSidebarConfig } from '../../utils/sidebarChecker';
import { pickNearestBreakpoint } from '../../utils';
export var getEdgeSidebarEffect = function getEdgeSidebarEffect(state, config) {
  if (isPermanentSidebarConfig(config)) {
    return createPermanentSidebarEffect(config, state);
  } else if (isPersistentSidebarConfig(config)) {
    return createPersistentSidebarEffect(config, state);
  }

  return undefined;
};
export default (function (state, edgeSidebar) {
  var configMap = edgeSidebar.configMap,
      configMapById = edgeSidebar.configMapById,
      sidebarIds = edgeSidebar.sidebarIds;
  var breakpoints = Object.keys(configMap);
  var effectsMap = {};
  breakpoints.forEach(function (bp) {
    effectsMap[bp] = []; // iterate all sidebars

    sidebarIds.forEach(function (aSidebarId) {
      var config = pickNearestBreakpoint(configMapById[aSidebarId], bp);
      var effect = getEdgeSidebarEffect(state, config);
      if (effect) effectsMap[bp].push(effect);
    });
  });
  return {
    iterateBreakpointEffects: function iterateBreakpointEffects(inputs, getEffects) {
      var foundAllSidebars = false;
      var sidebarCount = sidebarIds.length;
      inputs.forEach(function (bp) {
        var effects = pickNearestBreakpoint(effectsMap, bp);

        if (effects) {
          if (!foundAllSidebars && effects.length === sidebarCount) {
            foundAllSidebars = true;
          }

          if (foundAllSidebars && effects.length < sidebarCount) {
            // attach all
            var existingIds = effects.map(function (_ref) {
              var id = _ref.id;
              return id;
            });
            var missingIds = sidebarIds.filter(function (id) {
              return !existingIds.includes(id);
            });
            missingIds.forEach(function (id) {
              effects.push(getEdgeSidebarEffect(state, pickNearestBreakpoint(configMapById[id], bp)));
            });
          }

          getEffects(bp, effects);
        } else {
          getEffects(bp, []);
        }
      });
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9lZmZlY3RzL0VkZ2VTaWRlYmFycy9FZGdlU2lkZWJhckVmZmVjdHMudHMiXSwibmFtZXMiOlsiY3JlYXRlUGVybWFuZW50U2lkZWJhckVmZmVjdCIsImNyZWF0ZVBlcnNpc3RlbnRTaWRlYmFyRWZmZWN0IiwiaXNQZXJtYW5lbnRTaWRlYmFyQ29uZmlnIiwiaXNQZXJzaXN0ZW50U2lkZWJhckNvbmZpZyIsInBpY2tOZWFyZXN0QnJlYWtwb2ludCIsImdldEVkZ2VTaWRlYmFyRWZmZWN0Iiwic3RhdGUiLCJjb25maWciLCJ1bmRlZmluZWQiLCJlZGdlU2lkZWJhciIsImNvbmZpZ01hcCIsImNvbmZpZ01hcEJ5SWQiLCJzaWRlYmFySWRzIiwiYnJlYWtwb2ludHMiLCJPYmplY3QiLCJrZXlzIiwiZWZmZWN0c01hcCIsImZvckVhY2giLCJicCIsImFTaWRlYmFySWQiLCJlZmZlY3QiLCJwdXNoIiwiaXRlcmF0ZUJyZWFrcG9pbnRFZmZlY3RzIiwiaW5wdXRzIiwiZ2V0RWZmZWN0cyIsImZvdW5kQWxsU2lkZWJhcnMiLCJzaWRlYmFyQ291bnQiLCJsZW5ndGgiLCJlZmZlY3RzIiwiZXhpc3RpbmdJZHMiLCJtYXAiLCJpZCIsIm1pc3NpbmdJZHMiLCJmaWx0ZXIiLCJpbmNsdWRlcyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsNEJBQVQsUUFBNkMscUJBQTdDO0FBQ0EsU0FBU0MsNkJBQVQsUUFBOEMsc0JBQTlDO0FBUUEsU0FDRUMsd0JBREYsRUFFRUMseUJBRkYsUUFHTyw0QkFIUDtBQUtBLFNBQVNDLHFCQUFULFFBQXNDLGFBQXRDO0FBRUEsT0FBTyxJQUFNQyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLENBQ2xDQyxLQURrQyxFQUVsQ0MsTUFGa0MsRUFHL0I7QUFDSCxNQUFJTCx3QkFBd0IsQ0FBQ0ssTUFBRCxDQUE1QixFQUFzQztBQUNwQyxXQUFPUCw0QkFBNEIsQ0FBQ08sTUFBRCxFQUFTRCxLQUFULENBQW5DO0FBQ0Qs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dFNpZGViYXJFZmZlY3QgfSBmcm9tICcuLi9QZXJtYW5lbnRTaWRlYmFyJztcbmltcG9ydCB7IGNyZWF0ZVBlcnNpc3RlbnRTaWRlYmFyRWZmZWN0IH0gZnJvbSAnLi4vUGVyc2lzdGVudFNpZGViYXInO1xuaW1wb3J0IHtcbiAgRGljdGlvbmFyeSxcbiAgRWRnZVNpZGViYXJDb25maWcsXG4gIEVkZ2VTaWRlYmFyRGF0YSxcbiAgSVNpZGViYXJFZmZlY3QsXG4gIFN0YXRlLFxufSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQge1xuICBpc1Blcm1hbmVudFNpZGViYXJDb25maWcsXG4gIGlzUGVyc2lzdGVudFNpZGViYXJDb25maWcsXG59IGZyb20gJy4uLy4uL3V0aWxzL3NpZGViYXJDaGVja2VyJztcbmltcG9ydCB7IEJyZWFrcG9pbnQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlQnJlYWtwb2ludHMnO1xuaW1wb3J0IHsgcGlja05lYXJlc3RCcmVha3BvaW50IH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgZ2V0RWRnZVNpZGViYXJFZmZlY3QgPSAoXG4gIHN0YXRlOiBTdGF0ZSxcbiAgY29uZmlnOiBFZGdlU2lkZWJhckNvbmZpZyxcbikgPT4ge1xuICBpZiAoaXNQZXJtYW5lbnRTaWRlYmFyQ29uZmlnKGNvbmZpZykpIHtcbiAgICByZXR1cm4gY3JlYXRlUGVybWFuZW50U2lkZWJhckVmZmVjdChjb25maWcsIHN0YXRlKTtcbiAgfSBlbHNlIGlmIChpc1BlcnNpc3RlbnRTaWRlYmFyQ29uZmlnKGNvbmZpZykpIHtcbiAgICByZXR1cm4gY3JlYXRlUGVyc2lzdGVudFNpZGViYXJFZmZlY3QoY29uZmlnLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZTogU3RhdGUsIGVkZ2VTaWRlYmFyOiBFZGdlU2lkZWJhckRhdGEpID0+IHtcbiAgY29uc3QgeyBjb25maWdNYXAsIGNvbmZpZ01hcEJ5SWQsIHNpZGViYXJJZHMgfSA9IGVkZ2VTaWRlYmFyXG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gT2JqZWN0LmtleXMoY29uZmlnTWFwKTtcbiAgY29uc3QgZWZmZWN0c01hcDogRGljdGlvbmFyeTxJU2lkZWJhckVmZmVjdFtdPiA9IHt9O1xuICBicmVha3BvaW50cy5mb3JFYWNoKChicDogQnJlYWtwb2ludCkgPT4ge1xuICAgIGVmZmVjdHNNYXBbYnBdID0gW107XG4gICAgLy8gaXRlcmF0ZSBhbGwgc2lkZWJhcnNcbiAgICBzaWRlYmFySWRzLmZvckVhY2goYVNpZGViYXJJZCA9PiB7XG4gICAgICBjb25zdCBjb25maWcgPSBwaWNrTmVhcmVzdEJyZWFrcG9pbnQoY29uZmlnTWFwQnlJZFthU2lkZWJhcklkXSwgYnApXG4gICAgICBjb25zdCBlZmZlY3QgPSBnZXRFZGdlU2lkZWJhckVmZmVjdChzdGF0ZSwgY29uZmlnKTtcbiAgICAgIGlmIChlZmZlY3QpIGVmZmVjdHNNYXBbYnBdLnB1c2goZWZmZWN0KTtcbiAgICB9KVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBpdGVyYXRlQnJlYWtwb2ludEVmZmVjdHM6IChcbiAgICAgIGlucHV0czogQnJlYWtwb2ludFtdLFxuICAgICAgZ2V0RWZmZWN0czogKGJyZWFrcG9pbnQ6IEJyZWFrcG9pbnQsIGVmZmVjdHM/OiBJU2lkZWJhckVmZmVjdFtdKSA9PiB2b2lkXG4gICAgKSA9PiB7XG4gICAgICBsZXQgZm91bmRBbGxTaWRlYmFycyA9IGZhbHNlO1xuICAgICAgY29uc3Qgc2lkZWJhckNvdW50ID0gc2lkZWJhcklkcy5sZW5ndGg7XG4gICAgICBpbnB1dHMuZm9yRWFjaChicCA9PiB7XG4gICAgICAgIGNvbnN0IGVmZmVjdHM6IElTaWRlYmFyRWZmZWN0W10gPSBwaWNrTmVhcmVzdEJyZWFrcG9pbnQoZWZmZWN0c01hcCwgYnApO1xuICAgICAgICBpZiAoZWZmZWN0cykge1xuICAgICAgICAgIGlmICghZm91bmRBbGxTaWRlYmFycyAmJiBlZmZlY3RzLmxlbmd0aCA9PT0gc2lkZWJhckNvdW50KSB7XG4gICAgICAgICAgICBmb3VuZEFsbFNpZGViYXJzID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZm91bmRBbGxTaWRlYmFycyAmJiBlZmZlY3RzLmxlbmd0aCA8IHNpZGViYXJDb3VudCkge1xuICAgICAgICAgICAgLy8gYXR0YWNoIGFsbFxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdJZHMgPSBlZmZlY3RzLm1hcCgoeyBpZCB9KSA9PiBpZCk7XG4gICAgICAgICAgICBjb25zdCBtaXNzaW5nSWRzOiBzdHJpbmdbXSA9IHNpZGViYXJJZHMuZmlsdGVyKFxuICAgICAgICAgICAgICAoaWQ6IHN0cmluZykgPT4gIWV4aXN0aW5nSWRzLmluY2x1ZGVzKGlkKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1pc3NpbmdJZHMuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgICAgIGVmZmVjdHMucHVzaChcbiAgICAgICAgICAgICAgICBnZXRFZGdlU2lkZWJhckVmZmVjdChcbiAgICAgICAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgICAgICAgICAgcGlja05lYXJlc3RCcmVha3BvaW50KGNvbmZpZ01hcEJ5SWRbaWRdLCBicClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZ2V0RWZmZWN0cyhicCwgZWZmZWN0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2V0RWZmZWN0cyhicCwgW10pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufTtcbiJdfQ==