function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import { get, isHeaderClipped } from '../../utils';

var incrementZIndex = function incrementZIndex(theme, plus) {
  return {
    zIndex: get(theme, 'zIndex.drawer', 1200) + plus
  };
};

export var isSomeClipped = function isSomeClipped() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      clipped = _ref.clipped;

  if (typeof clipped === 'boolean') {
    return clipped;
  }

  if (_typeof(clipped) === 'object') {
    return Object.values(clipped).some(function (value) {
      return !!value;
    });
  }

  return false;
};
export default (function (header) {
  var isAboveSomeSidebars = isSomeClipped(header);
  return {
    id: get(header, 'id'),
    getHeaderZIndex: function getHeaderZIndex(theme) {
      return isAboveSomeSidebars ? incrementZIndex(theme, 10 + (header.layer || 0)) : undefined;
    },
    getEdgeSidebarZIndex: function getEdgeSidebarZIndex(sidebarId, theme) {
      return isAboveSomeSidebars && !isHeaderClipped(header, sidebarId) ? incrementZIndex(theme, 20) : undefined;
    },
    isObjectClipped: function isObjectClipped(sidebarId) {
      return isHeaderClipped(header, sidebarId);
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9lZmZlY3RzL0hlYWRlci9IZWFkZXJFZmZlY3QudHMiXSwibmFtZXMiOlsiZ2V0IiwiaXNIZWFkZXJDbGlwcGVkIiwiaW5jcmVtZW50WkluZGV4IiwidGhlbWUiLCJwbHVzIiwiekluZGV4IiwiaXNTb21lQ2xpcHBlZCIsImNsaXBwZWQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJzb21lIiwidmFsdWUiLCJoZWFkZXIiLCJpc0Fib3ZlU29tZVNpZGViYXJzIiwiaWQiLCJnZXRIZWFkZXJaSW5kZXgiLCJsYXllciIsInVuZGVmaW5lZCIsImdldEVkZ2VTaWRlYmFyWkluZGV4Iiwic2lkZWJhcklkIiwiaXNPYmplY3RDbGlwcGVkIl0sIm1hcHBpbmdzIjoiOztBQUNBLFNBQVNBLEdBQVQsRUFBY0MsZUFBZCxRQUFxQyxhQUFyQzs7QUFHQSxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNDLEtBQUQsRUFBZUMsSUFBZjtBQUFBLFNBQWlDO0FBQ3ZEQyxJQUFBQSxNQUFNLEVBQUVMLEdBQUcsQ0FBQ0csS0FBRCxFQUFRLGVBQVIsRUFBeUIsSUFBekIsQ0FBSCxHQUFvQ0M7QUFEVyxHQUFqQztBQUFBLENBQXhCOztBQUlBLE9BQU8sSUFBTUUsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixHQUVhO0FBQUEsaUZBQVAsRUFBTztBQUFBLE1BRHhDQyxPQUN3QyxRQUR4Q0EsT0FDd0M7O0FBQ3hDLE1BQUksT0FBT0EsT0FBUCxLQUFtQixTQUF2QixFQUFrQztBQUNoQyxXQUFPQSxPQUFQO0FBQ0Q7O0FBQ0QsTUFBSSxRQUFPQSxPQUFQLE1BQW1CLFFBQXZCLEVBQWlDO0FBQy9CLFdBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjRixPQUFkLEVBQXVCRyxJQUF2QixDQUE0QixVQUFBQyxLQUFLO0FBQUEsYUFBSSxDQUFDLENBQUNBLEtBQU47QUFBQSxLQUFqQyxDQUFQO0FBQ0Q7O0FBQ0QsU0FBTyxLQUFQO0FBQ0QsQ0FWTTtBQVlQLGdCQUFlLFVBQUNDLE1BQUQsRUFBa0Q7QUFDL0QsTUFBTUMsbUJBQW1CLEdBQUdQLGFBQWEsQ0FBQ00sTUFBRCxDQUF6QztBQUNBLFNBQU87QUFDTEUsSUFBQUEsRUFBRSxFQUFFZCxHQUFHLENBQUNZLE1BQUQsRUFBUyxJQUFULENBREY7QUFFTEcsSUFBQUEsZUFBZSxFQUFFLHlCQUFDWixLQUFEO0FBQUEsYUFDZlUsbUJBQW1CLEdBQ2ZYLGVBQWUsQ0FBQ0MsS0FBRCxFQUFRLE1BQU1TLE1BQU0sQ0FBQ0ksS0FBUCxJQUFnQixDQUF0QixDQUFSLENBREEsR0FFZkMsU0FIVztBQUFBLEtBRlo7QUFNTEMsSUFBQUEsb0JBQW9CLEVBQUUsOEJBQUNDLFNBQUQsRUFBb0JoQixLQUFwQjtBQUFBLGFBQ3BCVSxtQkFBbUIsSUFBSSxDQUFDWixlQUFlLENBQUNXLE1BQUQsRUFBU08sU0FBVCxDQUF2QyxHQUNJakIsZUFBZSxDQUFDQyxLQUFELEVBQVEsRUFBUixDQURuQixHQUVJYyxTQUhnQjtBQUFBLEtBTmpCO0FBVUxHLElBQUFBLGVBQWUsRUFBRSx5QkFBQUQsU0FBUztBQUFBLGFBQUlsQixlQUFlLENBQUNXLE1BQUQsRUFBU08sU0FBVCxDQUFuQjtBQUFBO0FBVnJCLEdBQVA7QUFZRCxDQWREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGhlbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IHsgZ2V0LCBpc0hlYWRlckNsaXBwZWQgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBIZWFkZXJDb25maWcsIElIZWFkZXJFZmZlY3QgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmNvbnN0IGluY3JlbWVudFpJbmRleCA9ICh0aGVtZTogVGhlbWUsIHBsdXM6IG51bWJlcikgPT4gKHtcbiAgekluZGV4OiBnZXQodGhlbWUsICd6SW5kZXguZHJhd2VyJywgMTIwMCkgKyBwbHVzLFxufSk7XG5cbmV4cG9ydCBjb25zdCBpc1NvbWVDbGlwcGVkID0gKHtcbiAgY2xpcHBlZCxcbn06IFBpY2s8SGVhZGVyQ29uZmlnLCAnY2xpcHBlZCc+ID0ge30pID0+IHtcbiAgaWYgKHR5cGVvZiBjbGlwcGVkID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gY2xpcHBlZDtcbiAgfVxuICBpZiAodHlwZW9mIGNsaXBwZWQgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoY2xpcHBlZCkuc29tZSh2YWx1ZSA9PiAhIXZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoaGVhZGVyOiBQYXJ0aWFsPEhlYWRlckNvbmZpZz4pOiBJSGVhZGVyRWZmZWN0ID0+IHtcbiAgY29uc3QgaXNBYm92ZVNvbWVTaWRlYmFycyA9IGlzU29tZUNsaXBwZWQoaGVhZGVyKTtcbiAgcmV0dXJuIHtcbiAgICBpZDogZ2V0KGhlYWRlciwgJ2lkJyksXG4gICAgZ2V0SGVhZGVyWkluZGV4OiAodGhlbWU/OiBUaGVtZSkgPT5cbiAgICAgIGlzQWJvdmVTb21lU2lkZWJhcnNcbiAgICAgICAgPyBpbmNyZW1lbnRaSW5kZXgodGhlbWUsIDEwICsgKGhlYWRlci5sYXllciB8fCAwKSlcbiAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgZ2V0RWRnZVNpZGViYXJaSW5kZXg6IChzaWRlYmFySWQ6IHN0cmluZywgdGhlbWU/OiBUaGVtZSkgPT5cbiAgICAgIGlzQWJvdmVTb21lU2lkZWJhcnMgJiYgIWlzSGVhZGVyQ2xpcHBlZChoZWFkZXIsIHNpZGViYXJJZClcbiAgICAgICAgPyBpbmNyZW1lbnRaSW5kZXgodGhlbWUsIDIwKVxuICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICBpc09iamVjdENsaXBwZWQ6IHNpZGViYXJJZCA9PiBpc0hlYWRlckNsaXBwZWQoaGVhZGVyLCBzaWRlYmFySWQpLFxuICB9O1xufTtcbiJdfQ==