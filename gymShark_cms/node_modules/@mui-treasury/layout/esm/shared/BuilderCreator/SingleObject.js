function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { keys } from '@material-ui/core/styles/createBreakpoints';
import { createSingleObjData } from '../State';

var makeRegistry = function makeRegistry(id) {
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : createSingleObjData({
      id: id
    });
  };
};

export var createSingleObjBuilder = function createSingleObjBuilder(_ref) {
  var defaultId = _ref.defaultId,
      component = _ref.component,
      _ref$Registry = _ref.Registry,
      Registry = _ref$Registry === void 0 ? makeRegistry(defaultId) : _ref$Registry;

  var Builder = function Builder() {
    var initialRpsConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var state = createSingleObjData({
      id: defaultId,
      rpsConfig: initialRpsConfig
    });
    var registry = Registry(state);
    return _extends(_extends({}, registry), {}, {
      create: function create(id) {
        state = createSingleObjData({
          id: id
        });
        registry = Registry(state);
        return registry;
      },
      update: function update(updater) {
        updater(state.rpsConfig);
      },
      hide: function hide(breakpoints) {
        if (typeof breakpoints === 'boolean') {
          state.hidden = breakpoints ? keys : [];
        } else {
          state.hidden = breakpoints;
        }
      },
      getId: function getId() {
        return state.id;
      },
      getData: function getData() {
        return state.rpsConfig;
      },
      debug: function debug() {
        if (process.env.NODE_ENV !== 'production') {
          console.group("".concat(component, ": "), "\"".concat(state.id, "\""));
          console.table(state.rpsConfig);
          console.table(state.hidden);
          console.groupEnd();
        }
      }
    });
  };

  return Builder;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zaGFyZWQvQnVpbGRlckNyZWF0b3IvU2luZ2xlT2JqZWN0LnRzIl0sIm5hbWVzIjpbImtleXMiLCJjcmVhdGVTaW5nbGVPYmpEYXRhIiwibWFrZVJlZ2lzdHJ5IiwiaWQiLCJzdGF0ZSIsImNyZWF0ZVNpbmdsZU9iakJ1aWxkZXIiLCJkZWZhdWx0SWQiLCJjb21wb25lbnQiLCJSZWdpc3RyeSIsIkJ1aWxkZXIiLCJpbml0aWFsUnBzQ29uZmlnIiwicnBzQ29uZmlnIiwicmVnaXN0cnkiLCJjcmVhdGUiLCJ1cGRhdGUiLCJ1cGRhdGVyIiwiaGlkZSIsImJyZWFrcG9pbnRzIiwiaGlkZGVuIiwiZ2V0SWQiLCJnZXREYXRhIiwiZGVidWciLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJjb25zb2xlIiwiZ3JvdXAiLCJ0YWJsZSIsImdyb3VwRW5kIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQXFCQSxJQUFyQixRQUFpQyw0Q0FBakM7QUFDQSxTQUFTQyxtQkFBVCxRQUE4RCxVQUE5RDs7QUE2QkEsSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBQ0MsRUFBRDtBQUFBLFNBQWdCLFlBQXlDO0FBQUEsUUFBeENDLEtBQXdDLHVFQUFoQ0gsbUJBQW1CLENBQUM7QUFBRUUsTUFBQUEsRUFBRSxFQUFGQTtBQUFGLEtBQUQsQ0FBYTtBQUFFLEdBQTNEO0FBQUEsQ0FBckI7O0FBRUEsT0FBTyxJQUFNRSxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXlCLE9BT3JCO0FBQUEsTUFIZkMsU0FHZSxRQUhmQSxTQUdlO0FBQUEsTUFGZkMsU0FFZSxRQUZmQSxTQUVlO0FBQUEsMkJBRGZDLFFBQ2U7QUFBQSxNQURmQSxRQUNlLDhCQURKTixZQUFZLENBQUNJLFNBQUQsQ0FDUjs7QUFDZixNQUFNRyxPQUFPLEdBQUcsU0FBVkEsT0FBVSxHQUFxRDtBQUFBLFFBQXBEQyxnQkFBb0QsdUVBQWpDLEVBQWlDO0FBQ25FLFFBQUlOLEtBQTRCLEdBQUdILG1CQUFtQixDQUFDO0FBQ3JERSxNQUFBQSxFQUFFLEVBQUVHLFNBRGlEO0FBRXJESyxNQUFBQSxTQUFTLEVBQUVEO0FBRjBDLEtBQUQsQ0FBdEQ7QUFJQSxRQUFJRSxRQUFRLEdBQUdKLFFBQVEsQ0FBQ0osS0FBRCxDQUF2QjtBQUVBLGlDQUNLUSxRQURMO0FBRUVDLE1BQUFBLE1BRkYsa0JBRVNWLEVBRlQsRUFFcUI7QUFDakJDLFFBQUFBLEtBQUssR0FBR0gsbUJBQW1CLENBQUM7QUFBRUUsVUFBQUEsRUFBRSxFQUFGQTtBQUFGLFNBQUQsQ0FBM0I7QUFDQVMsUUFBQUEsUUFBUSxHQUFHSixRQUFRLENBQUNKLEtBQUQsQ0FBbkI7QUFDQSxlQUFPUSxRQUFQO0FBQ0QsT0FOSDtBQU9FRSxNQUFBQSxNQVBGLGtCQU9TQyxPQVBULEVBT3VEO0FBQ25EQSxRQUFBQSxPQUFPLENBQUNYLEtBQUssQ0FBQ08sU0FBUCxDQUFQO0FBQ0QsT0FUSDtBQVVFSyxNQUFBQSxJQVZGLGdCQVVPQyxXQVZQLEVBVWtDO0FBQzlCLFlBQUksT0FBT0EsV0FBUCxLQUF1QixTQUEzQixFQUFzQztBQUNwQ2IsVUFBQUEsS0FBSyxDQUFDYyxNQUFOLEdBQWVELFdBQVcsR0FBR2pCLElBQUgsR0FBVSxFQUFwQztBQUNELFNBRkQsTUFFTztBQUNMSSxVQUFBQSxLQUFLLENBQUNjLE1BQU4sR0FBZUQsV0FBZjtBQUNEO0FBQ0YsT0FoQkg7QUFpQkVFLE1BQUFBLEtBQUssRUFBRTtBQUFBLGVBQU1mLEtBQUssQ0FBQ0QsRUFBWjtBQUFBLE9BakJUO0FBa0JFaUIsTUFBQUEsT0FBTyxFQUFFO0FBQUEsZUFBTWhCLEtBQUssQ0FBQ08sU0FBWjtBQUFBLE9BbEJYO0FBbUJFVSxNQUFBQSxLQUFLLEVBQUUsaUJBQU07QUFDWCxZQUFJQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUE3QixFQUEyQztBQUN6Q0MsVUFBQUEsT0FBTyxDQUFDQyxLQUFSLFdBQWlCbkIsU0FBakIscUJBQW9DSCxLQUFLLENBQUNELEVBQTFDO0FBQ0FzQixVQUFBQSxPQUFPLENBQUNFLEtBQVIsQ0FBY3ZCLEtBQUssQ0FBQ08sU0FBcEI7QUFDQWMsVUFBQUEsT0FBTyxDQUFDRSxLQUFSLENBQWN2QixLQUFLLENBQUNjLE1BQXBCO0FBQ0FPLFVBQUFBLE9BQU8sQ0FBQ0csUUFBUjtBQUNEO0FBQ0Y7QUExQkg7QUE0QkQsR0FuQ0Q7O0FBcUNBLFNBQU9uQixPQUFQO0FBQ0QsQ0E5Q00iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcmVha3BvaW50LCBrZXlzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzJztcbmltcG9ydCB7IGNyZWF0ZVNpbmdsZU9iakRhdGEsIFJwc0NvbmZpZywgU2luZ2xlT2JqRGF0YSB9IGZyb20gJy4uL1N0YXRlJztcblxudHlwZSBQYXJhbXM8Uj4gPSB7XG4gIGRlZmF1bHRJZDogc3RyaW5nO1xuICBjb21wb25lbnQ/OiAnSGVhZGVyJyB8ICdGb290ZXInIHwgJ0NvbnRlbnQnO1xuICBSZWdpc3RyeT86IFI7XG59O1xuZXhwb3J0IHR5cGUgRHVtbXlSZWdpc3RyeTxDb25maWcgPSB1bmRlZmluZWQsIFByb3BzID0ge30+ID0oXG4gIHN0YXRlOiBTaW5nbGVPYmpEYXRhPENvbmZpZz4sXG4gIHByb3BzPzogUHJvcHNcbikgPT4ge307XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2luZ2xlT2JqQnVpbGRlclJlc3VsdDxcbiAgUiBleHRlbmRzIER1bW15UmVnaXN0cnk8Q29uZmlnPixcbiAgQ29uZmlnID0gdW5kZWZpbmVkXG4+IHtcbiAgY3JlYXRlOiAoaWQ6IHN0cmluZykgPT4gUmV0dXJuVHlwZTxSPjtcbiAgdXBkYXRlOiAodXBkYXRlcjogKGNvbmZpZzogUnBzQ29uZmlnPENvbmZpZz4pID0+IHZvaWQpID0+IHZvaWQ7XG4gIGhpZGU6IChicmVha3BvaW50czogQnJlYWtwb2ludFtdIHwgYm9vbGVhbikgPT4gdm9pZDtcbiAgZ2V0SWQ6ICgpID0+IHN0cmluZztcbiAgZ2V0RGF0YTogKCkgPT4gUnBzQ29uZmlnPENvbmZpZz47XG4gIGRlYnVnPzogKCkgPT4gdm9pZDtcbn1cblxudHlwZSBCdWlsZGVyUmVzdWx0PFIgZXh0ZW5kcyBEdW1teVJlZ2lzdHJ5PENvbmZpZz4sIENvbmZpZyA9IHVuZGVmaW5lZD4gPSBSZXR1cm5UeXBlPFxuICBSXG4+ICZcbiAgU2luZ2xlT2JqQnVpbGRlclJlc3VsdDxSLCBDb25maWc+O1xuXG5jb25zdCBtYWtlUmVnaXN0cnkgPSAoaWQ6IHN0cmluZykgPT4gKHN0YXRlID0gY3JlYXRlU2luZ2xlT2JqRGF0YSh7IGlkIH0pKSA9PiB7fVxuXG5leHBvcnQgY29uc3QgY3JlYXRlU2luZ2xlT2JqQnVpbGRlciA9IDxcbiAgUiBleHRlbmRzIER1bW15UmVnaXN0cnk8Q29uZmlnPixcbiAgQ29uZmlnID0gdW5kZWZpbmVkXG4+KHtcbiAgZGVmYXVsdElkLFxuICBjb21wb25lbnQsXG4gIFJlZ2lzdHJ5ID0gbWFrZVJlZ2lzdHJ5KGRlZmF1bHRJZCkgYXMgUixcbn06IFBhcmFtczxSPikgPT4ge1xuICBjb25zdCBCdWlsZGVyID0gKGluaXRpYWxScHNDb25maWcgPSB7fSk6IEJ1aWxkZXJSZXN1bHQ8UiwgQ29uZmlnPiA9PiB7XG4gICAgbGV0IHN0YXRlOiBTaW5nbGVPYmpEYXRhPENvbmZpZz4gPSBjcmVhdGVTaW5nbGVPYmpEYXRhKHtcbiAgICAgIGlkOiBkZWZhdWx0SWQsXG4gICAgICBycHNDb25maWc6IGluaXRpYWxScHNDb25maWcsXG4gICAgfSk7XG4gICAgbGV0IHJlZ2lzdHJ5ID0gUmVnaXN0cnkoc3RhdGUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlZ2lzdHJ5LFxuICAgICAgY3JlYXRlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgc3RhdGUgPSBjcmVhdGVTaW5nbGVPYmpEYXRhKHsgaWQgfSk7XG4gICAgICAgIHJlZ2lzdHJ5ID0gUmVnaXN0cnkoc3RhdGUpO1xuICAgICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgICB9LFxuICAgICAgdXBkYXRlKHVwZGF0ZXI6IChjb25maWc6IFJwc0NvbmZpZzxDb25maWc+KSA9PiB2b2lkKSB7XG4gICAgICAgIHVwZGF0ZXIoc3RhdGUucnBzQ29uZmlnKTtcbiAgICAgIH0sXG4gICAgICBoaWRlKGJyZWFrcG9pbnRzOiBCcmVha3BvaW50W10pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBicmVha3BvaW50cyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgc3RhdGUuaGlkZGVuID0gYnJlYWtwb2ludHMgPyBrZXlzIDogW107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUuaGlkZGVuID0gYnJlYWtwb2ludHM7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBnZXRJZDogKCkgPT4gc3RhdGUuaWQsXG4gICAgICBnZXREYXRhOiAoKSA9PiBzdGF0ZS5ycHNDb25maWcsXG4gICAgICBkZWJ1ZzogKCkgPT4ge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZ3JvdXAoYCR7Y29tcG9uZW50fTogYCwgYFwiJHtzdGF0ZS5pZH1cImApO1xuICAgICAgICAgIGNvbnNvbGUudGFibGUoc3RhdGUucnBzQ29uZmlnKTtcbiAgICAgICAgICBjb25zb2xlLnRhYmxlKHN0YXRlLmhpZGRlbik7XG4gICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0gYXMgQnVpbGRlclJlc3VsdDxSLCBDb25maWc+O1xuICB9O1xuXG4gIHJldHVybiBCdWlsZGVyO1xufTtcbiJdfQ==