function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { keys } from '@material-ui/core/styles/createBreakpoints';
import mapValues from 'lodash.mapvalues';
import { createMultiObjData, createSingleObjData } from '../State';
import { attachHiddenToMapById, normalizeMapById, getFieldById } from '../../utils';
export var createMultiObjBuilder = function createMultiObjBuilder(_ref) {
  var Registry = _ref.Registry,
      component = _ref.component;

  var MultiObjBuilder = function MultiObjBuilder() {
    var initialRpsConfigById = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var state = createMultiObjData(initialRpsConfigById);

    var getMapById = function getMapById() {
      var mapById = getFieldById(state.dataById, 'rpsConfig');
      var hiddenById = getFieldById(state.dataById, 'hidden');
      var propsById = getFieldById(state.dataById, 'props');
      var finalMapById = mapValues(mapById, function (value, key) {
        return mapValues(value, function (nestedValue) {
          return _extends(_extends({}, nestedValue), propsById[key]);
        });
      });
      var attachedMapById = attachHiddenToMapById(finalMapById, hiddenById);
      return {
        configMap: normalizeMapById(attachedMapById),
        configMapById: attachedMapById
      };
    };

    return {
      create: function create(id, props) {
        if (!state.ids.includes(id)) {
          // throw new Error(
          //   `id: ${id} already exists, please define another unique id`
          // );
          state.ids.push(id);
          state.dataById[id] = createSingleObjData({
            id: id,
            props: props
          });
        }

        return Registry(state.dataById[id]);
      },
      update: function update(id, updater) {
        if (state.dataById[id]) {
          updater(state.dataById[id].rpsConfig);
        } else {
          console.warn("No sidebar to update. id: ".concat(id));
        }
      },
      hide: function hide(id, breakpoints) {
        if (typeof breakpoints === 'boolean') {
          state.dataById[id].hidden = breakpoints ? keys : [];
        } else {
          state.dataById[id].hidden = breakpoints;
        }
      },
      getData: function getData() {
        return _extends({
          ids: state.ids,
          sidebarIds: state.ids,
          propsById: getFieldById(state.dataById, 'props'),
          hiddenById: getFieldById(state.dataById, 'hidden')
        }, getMapById());
      },
      debug: function debug() {
        if (process.env.NODE_ENV !== 'production') {
          var data = this.getData();
          state.ids.forEach(function (id) {
            console.group("".concat(component, ": "), "\"".concat(id, "\""));
            console.table(data.configMapById[id]);
            console.table(data.hiddenById[id]);
            console.groupEnd();
          });
        }
      }
    };
  };

  return MultiObjBuilder;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,