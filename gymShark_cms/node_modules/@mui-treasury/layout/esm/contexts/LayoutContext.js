function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import merge from 'deepmerge';
import LayoutBuilder from '../builders';
var Context = React.createContext(null);
Context.displayName = 'MuiLayoutCtx';

var reducer = function reducer(state, action) {
  var newState = _extends({}, state);

  switch (action.type) {
    case 'SET_OPEN':
      newState.sidebar[action.payload.id].open = action.payload.value;
      return newState;

    case 'SET_COLLAPSED':
      newState.sidebar[action.payload.id].collapsed = action.payload.value;
      return newState;

    default:
      return state;
  }
};

export var useLayoutCtx = function useLayoutCtx() {
  var ctx = React.useContext(Context);

  if (!ctx) {
    throw new Error('useLayoutCtx must be rendered under LayoutProvider');
  }

  return ctx;
};
export var LayoutConsumer = Context.Consumer;
var defaultScheme = LayoutBuilder();
export var LayoutProvider = function LayoutProvider(_ref) {
  var controlledInitialState = _ref.initialState,
      _ref$scheme = _ref.scheme,
      scheme = _ref$scheme === void 0 ? defaultScheme : _ref$scheme,
      children = _ref.children;
  var autoGenInitialState = scheme.getInitialState();

  var _React$useReducer = React.useReducer(reducer, merge(autoGenInitialState, controlledInitialState || {})),
      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),
      state = _React$useReducer2[0],
      dispatch = _React$useReducer2[1];

  var setOpen = function setOpen(id, value) {
    if (typeof id !== 'string') {
      if (process.env.NODE_ENV !== 'production') {
        throw new Error('To call `setOpen`, You must pass 1st argument(sidebarId) as string');
      }

      return;
    }

    return dispatch({
      type: 'SET_OPEN',
      payload: {
        id: id,
        value: value
      }
    });
  };

  var setCollapsed = function setCollapsed(id, value) {
    if (typeof id !== 'string') {
      if (process.env.NODE_ENV !== 'production') {
        throw new Error('To call `setCollapsed`, You must pass 1st argument(sidebarId) as string');
      }

      return;
    }

    return dispatch({
      type: 'SET_COLLAPSED',
      payload: {
        id: id,
        value: value
      }
    });
  };

  var data = scheme.getComponentData();
  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: {
      state: state,
      data: data,
      setOpen: setOpen,
      setCollapsed: setCollapsed
    }
  }, children);
};
export default Context;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb250ZXh0cy9MYXlvdXRDb250ZXh0LnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIm1lcmdlIiwiTGF5b3V0QnVpbGRlciIsIkNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiZGlzcGxheU5hbWUiLCJyZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJuZXdTdGF0ZSIsInR5cGUiLCJzaWRlYmFyIiwicGF5bG9hZCIsImlkIiwib3BlbiIsInZhbHVlIiwiY29sbGFwc2VkIiwidXNlTGF5b3V0Q3R4IiwiY3R4IiwidXNlQ29udGV4dCIsIkVycm9yIiwiTGF5b3V0Q29uc3VtZXIiLCJDb25zdW1lciIsImRlZmF1bHRTY2hlbWUiLCJMYXlvdXRQcm92aWRlciIsImNvbnRyb2xsZWRJbml0aWFsU3RhdGUiLCJpbml0aWFsU3RhdGUiLCJzY2hlbWUiLCJjaGlsZHJlbiIsImF1dG9HZW5Jbml0aWFsU3RhdGUiLCJnZXRJbml0aWFsU3RhdGUiLCJ1c2VSZWR1Y2VyIiwiZGlzcGF0Y2giLCJzZXRPcGVuIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwic2V0Q29sbGFwc2VkIiwiZGF0YSIsImdldENvbXBvbmVudERhdGEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsV0FBbEI7QUFDQSxPQUFPQyxhQUFQLE1BQTBCLGFBQTFCO0FBSUEsSUFBTUMsT0FBTyxHQUFHSCxLQUFLLENBQUNJLGFBQU4sQ0FBa0MsSUFBbEMsQ0FBaEI7QUFDQUQsT0FBTyxDQUFDRSxXQUFSLEdBQXNCLGNBQXRCOztBQWNBLElBQU1DLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQUNDLEtBQUQsRUFBZUMsTUFBZixFQUFrQztBQUNoRCxNQUFNQyxRQUFRLEdBQUcsU0FBYyxFQUFkLEVBQWtCRixLQUFsQixDQUFqQjs7QUFDQSxVQUFRQyxNQUFNLENBQUNFLElBQWY7QUFDRSxTQUFLLFVBQUw7QUFDRUQsTUFBQUEsUUFBUSxDQUFDRSxPQUFULENBQWlCSCxNQUFNLENBQUNJLE9BQVAsQ0FBZUMsRUFBaEMsRUFBb0NDLElBQXBDLEdBQTJDTixNQUFNLENBQUNJLE9BQVAsQ0FBZUcsS0FBMUQ7QUFDQSxhQUFPTixRQUFQOztBQUNGLFNBQUssZUFBTDtBQUNFQSxNQUFBQSxRQUFRLENBQUNFLE9BQVQsQ0FBaUJILE1BQU0sQ0FBQ0ksT0FBUCxDQUFlQyxFQUFoQyxFQUFvQ0csU0FBcEMsR0FBZ0RSLE1BQU0sQ0FBQ0ksT0FBUCxDQUFlRyxLQUEvRDtBQUNBLGFBQU9OLFFBQVA7O0FBQ0Y7QUFDRSxhQUFPRixLQUFQO0FBUko7QUFVRCxDQVpEOztBQWNBLE9BQU8sSUFBTVUsWUFBWSxHQUFHLFNBQWZBLFlBQWUsR0FBTTtBQUNoQyxNQUFNQyxHQUFHLEdBQUdsQixLQUFLLENBQUNtQixVQUFOLENBQWlCaEIsT0FBakIsQ0FBWjs7QUFDQSxNQUFJLENBQUNlLEdBQUwsRUFBVTtBQUNSLFVBQU0sSUFBSUUsS0FBSixDQUFVLG9EQUFWLENBQU47QUFDRDs7QUFDRCxTQUFPRixHQUFQO0FBQ0QsQ0FOTTtBQVFQLE9BQU8sSUFBTUcsY0FBYyxHQUFHbEIsT0FBTyxDQUFDbUIsUUFBL0I7QUFPUCxJQUFNQyxhQUFhLEdBQUdyQixhQUFhLEVBQW5DO0FBRUEsT0FBTyxJQUFNc0IsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixPQUlzQjtBQUFBLE1BSHBDQyxzQkFHb0MsUUFIbERDLFlBR2tEO0FBQUEseUJBRmxEQyxNQUVrRDtBQUFBLE1BRmxEQSxNQUVrRCw0QkFGekNKLGFBRXlDO0FBQUEsTUFEbERLLFFBQ2tELFFBRGxEQSxRQUNrRDtBQUNsRCxNQUFNQyxtQkFBbUIsR0FBR0YsTUFBTSxDQUFDRyxlQUFQLEVBQTVCOztBQURrRCwwQkFFeEI5QixLQUFLLENBQUMrQixVQUFOLENBQ3hCekIsT0FEd0IsRUFFeEJMLEtBQUssQ0FBQzRCLG1CQUFELEVBQXNCSixzQkFBc0IsSUFBSSxFQUFoRCxDQUZtQixDQUZ3QjtBQUFBO0FBQUEsTUFFM0NsQixLQUYyQztBQUFBLE1BRXBDeUIsUUFGb0M7O0FBTWxELE1BQU1DLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQUNwQixFQUFELEVBQWFFLEtBQWIsRUFBZ0M7QUFDOUMsUUFBSSxPQUFPRixFQUFQLEtBQWMsUUFBbEIsRUFBNEI7QUFDMUIsVUFBSXFCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQTdCLEVBQTJDO0FBQ3pDLGNBQU0sSUFBSWhCLEtBQUosQ0FDSixvRUFESSxDQUFOO0FBR0Q7O0FBQ0Q7QUFDRDs7QUFDRCxXQUFPWSxRQUFRLENBQUM7QUFBRXRCLE1BQUFBLElBQUksRUFBRSxVQUFSO0FBQW9CRSxNQUFBQSxPQUFPLEVBQUU7QUFBRUMsUUFBQUEsRUFBRSxFQUFGQSxFQUFGO0FBQU1FLFFBQUFBLEtBQUssRUFBTEE7QUFBTjtBQUE3QixLQUFELENBQWY7QUFDRCxHQVZEOztBQVdBLE1BQU1zQixZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFDeEIsRUFBRCxFQUFhRSxLQUFiLEVBQWdDO0FBQ25ELFFBQUksT0FBT0YsRUFBUCxLQUFjLFFBQWxCLEVBQTRCO0FBQzFCLFVBQUlxQixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUE3QixFQUEyQztBQUN6QyxjQUFNLElBQUloQixLQUFKLENBQ0oseUVBREksQ0FBTjtBQUdEOztBQUNEO0FBQ0Q7O0FBQ0QsV0FBT1ksUUFBUSxDQUFDO0FBQ2R0QixNQUFBQSxJQUFJLEVBQUUsZUFEUTtBQUVkRSxNQUFBQSxPQUFPLEVBQUU7QUFBRUMsUUFBQUEsRUFBRSxFQUFGQSxFQUFGO0FBQU1FLFFBQUFBLEtBQUssRUFBTEE7QUFBTjtBQUZLLEtBQUQsQ0FBZjtBQUlELEdBYkQ7O0FBY0EsTUFBTXVCLElBQUksR0FBR1gsTUFBTSxDQUFDWSxnQkFBUCxFQUFiO0FBQ0Esc0JBQ0Usb0JBQUMsT0FBRCxDQUFTLFFBQVQ7QUFDRSxJQUFBLEtBQUssRUFBRTtBQUNMaEMsTUFBQUEsS0FBSyxFQUFMQSxLQURLO0FBRUwrQixNQUFBQSxJQUFJLEVBQUpBLElBRks7QUFHTEwsTUFBQUEsT0FBTyxFQUFQQSxPQUhLO0FBSUxJLE1BQUFBLFlBQVksRUFBWkE7QUFKSztBQURULEtBUUdULFFBUkgsQ0FERjtBQVlELENBaERNO0FBa0RQLGVBQWV6QixPQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnO1xuaW1wb3J0IExheW91dEJ1aWxkZXIgZnJvbSAnLi4vYnVpbGRlcnMnO1xuaW1wb3J0IHsgSUxheW91dEJ1aWxkZXIgfSBmcm9tICcuLi9idWlsZGVycyc7XG5pbXBvcnQgeyBMYXlvdXREYXRhLCBTdGF0ZSB9IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3QgQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8Q29udGV4dFZhbHVlPihudWxsKTtcbkNvbnRleHQuZGlzcGxheU5hbWUgPSAnTXVpTGF5b3V0Q3R4JztcblxuZXhwb3J0IHR5cGUgQ29udGV4dFZhbHVlID0ge1xuICBzdGF0ZTogU3RhdGU7XG4gIGRhdGE6IExheW91dERhdGE7XG4gIHNldE9wZW46IChpZDogc3RyaW5nLCB2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgc2V0Q29sbGFwc2VkOiAoaWQ6IHN0cmluZywgdmFsdWU6IGJvb2xlYW4pID0+IHZvaWQ7XG59O1xuXG50eXBlIFNpZGViYXJQYXlsb2FkID0geyBpZDogc3RyaW5nOyB2YWx1ZTogYm9vbGVhbiB9O1xudHlwZSBBY3Rpb24gPVxuICB8IHsgdHlwZTogJ1NFVF9PUEVOJzsgcGF5bG9hZDogU2lkZWJhclBheWxvYWQgfVxuICB8IHsgdHlwZTogJ1NFVF9DT0xMQVBTRUQnOyBwYXlsb2FkOiBTaWRlYmFyUGF5bG9hZCB9O1xuXG5jb25zdCByZWR1Y2VyID0gKHN0YXRlOiBTdGF0ZSwgYWN0aW9uOiBBY3Rpb24pID0+IHtcbiAgY29uc3QgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSk7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdTRVRfT1BFTic6XG4gICAgICBuZXdTdGF0ZS5zaWRlYmFyW2FjdGlvbi5wYXlsb2FkLmlkXS5vcGVuID0gYWN0aW9uLnBheWxvYWQudmFsdWU7XG4gICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgY2FzZSAnU0VUX0NPTExBUFNFRCc6XG4gICAgICBuZXdTdGF0ZS5zaWRlYmFyW2FjdGlvbi5wYXlsb2FkLmlkXS5jb2xsYXBzZWQgPSBhY3Rpb24ucGF5bG9hZC52YWx1ZTtcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgdXNlTGF5b3V0Q3R4ID0gKCkgPT4ge1xuICBjb25zdCBjdHggPSBSZWFjdC51c2VDb250ZXh0KENvbnRleHQpO1xuICBpZiAoIWN0eCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXNlTGF5b3V0Q3R4IG11c3QgYmUgcmVuZGVyZWQgdW5kZXIgTGF5b3V0UHJvdmlkZXInKTtcbiAgfVxuICByZXR1cm4gY3R4O1xufTtcblxuZXhwb3J0IGNvbnN0IExheW91dENvbnN1bWVyID0gQ29udGV4dC5Db25zdW1lcjtcblxuZXhwb3J0IHR5cGUgTGF5b3V0UHJvdmlkZXJQcm9wcyA9IHtcbiAgaW5pdGlhbFN0YXRlPzogU3RhdGU7XG4gIHNjaGVtZTogSUxheW91dEJ1aWxkZXI7XG59O1xuXG5jb25zdCBkZWZhdWx0U2NoZW1lID0gTGF5b3V0QnVpbGRlcigpO1xuXG5leHBvcnQgY29uc3QgTGF5b3V0UHJvdmlkZXIgPSAoe1xuICBpbml0aWFsU3RhdGU6IGNvbnRyb2xsZWRJbml0aWFsU3RhdGUsXG4gIHNjaGVtZSA9IGRlZmF1bHRTY2hlbWUsXG4gIGNoaWxkcmVuLFxufTogUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48TGF5b3V0UHJvdmlkZXJQcm9wcz4pID0+IHtcbiAgY29uc3QgYXV0b0dlbkluaXRpYWxTdGF0ZSA9IHNjaGVtZS5nZXRJbml0aWFsU3RhdGUoKTtcbiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSBSZWFjdC51c2VSZWR1Y2VyKFxuICAgIHJlZHVjZXIsXG4gICAgbWVyZ2UoYXV0b0dlbkluaXRpYWxTdGF0ZSwgY29udHJvbGxlZEluaXRpYWxTdGF0ZSB8fCB7fSlcbiAgKTtcbiAgY29uc3Qgc2V0T3BlbiA9IChpZDogc3RyaW5nLCB2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAgIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1RvIGNhbGwgYHNldE9wZW5gLCBZb3UgbXVzdCBwYXNzIDFzdCBhcmd1bWVudChzaWRlYmFySWQpIGFzIHN0cmluZydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9PUEVOJywgcGF5bG9hZDogeyBpZCwgdmFsdWUgfSB9KTtcbiAgfTtcbiAgY29uc3Qgc2V0Q29sbGFwc2VkID0gKGlkOiBzdHJpbmcsIHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnVG8gY2FsbCBgc2V0Q29sbGFwc2VkYCwgWW91IG11c3QgcGFzcyAxc3QgYXJndW1lbnQoc2lkZWJhcklkKSBhcyBzdHJpbmcnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnU0VUX0NPTExBUFNFRCcsXG4gICAgICBwYXlsb2FkOiB7IGlkLCB2YWx1ZSB9LFxuICAgIH0pO1xuICB9O1xuICBjb25zdCBkYXRhID0gc2NoZW1lLmdldENvbXBvbmVudERhdGEoKTtcbiAgcmV0dXJuIChcbiAgICA8Q29udGV4dC5Qcm92aWRlclxuICAgICAgdmFsdWU9e3tcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHNldE9wZW4sXG4gICAgICAgIHNldENvbGxhcHNlZCxcbiAgICAgIH19XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRleHQ7XG4iXX0=