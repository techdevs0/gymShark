function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import resolveDirection from './resolveDirection';
export default (function (breakpointsObject, theme) {
  var entries = Object.entries(breakpointsObject);
  var mediaQueries = {};
  entries.forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    if (key === 'xs') {
      mediaQueries = _extends(_extends({}, mediaQueries), resolveDirection(theme.direction, value));
    } else {
      mediaQueries[theme.breakpoints.up(key)] = resolveDirection(theme.direction, value);
    }
  });
  return mediaQueries;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9jcmVhdGVCcmVha3BvaW50U3R5bGVzLnRzIl0sIm5hbWVzIjpbInJlc29sdmVEaXJlY3Rpb24iLCJicmVha3BvaW50c09iamVjdCIsInRoZW1lIiwiZW50cmllcyIsIk9iamVjdCIsIm1lZGlhUXVlcmllcyIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsImRpcmVjdGlvbiIsImJyZWFrcG9pbnRzIiwidXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBR0EsT0FBT0EsZ0JBQVAsTUFBNkIsb0JBQTdCO0FBS0EsZ0JBQWUsVUFDYkMsaUJBRGEsRUFFYkMsS0FGYSxFQUdWO0FBQ0gsTUFBTUMsT0FBTyxHQUFHQyxNQUFNLENBQUNELE9BQVAsQ0FBZUYsaUJBQWYsQ0FBaEI7QUFDQSxNQUFJSSxZQUEwQixHQUFHLEVBQWpDO0FBQ0FGLEVBQUFBLE9BQU8sQ0FBQ0csT0FBUixDQUFnQixnQkFBdUM7QUFBQTtBQUFBLFFBQXJDQyxHQUFxQztBQUFBLFFBQWhDQyxLQUFnQzs7QUFDckQsUUFBSUQsR0FBRyxLQUFLLElBQVosRUFBa0I7QUFDaEJGLE1BQUFBLFlBQVkseUJBQ1BBLFlBRE8sR0FFUEwsZ0JBQWdCLENBQUNFLEtBQUssQ0FBQ08sU0FBUCxFQUFrQkQsS0FBbEIsQ0FGVCxDQUFaO0FBSUQsS0FMRCxNQUtPO0FBQ0xILE1BQUFBLFlBQVksQ0FBQ0gsS0FBSyxDQUFDUSxXQUFOLENBQWtCQyxFQUFsQixDQUFxQkosR0FBckIsQ0FBRCxDQUFaLEdBQTBDUCxnQkFBZ0IsQ0FDeERFLEtBQUssQ0FBQ08sU0FEa0QsRUFFeERELEtBRndELENBQTFEO0FBSUQ7QUFDRixHQVpEO0FBY0EsU0FBT0gsWUFBUDtBQUNELENBckJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGhlbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlTXVpVGhlbWUnO1xuaW1wb3J0IHsgQnJlYWtwb2ludCB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgeyBEaWN0aW9uYXJ5LCBSZXN1bHRTdHlsZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCByZXNvbHZlRGlyZWN0aW9uIGZyb20gJy4vcmVzb2x2ZURpcmVjdGlvbic7XG5cbmV4cG9ydCB0eXBlIFZhbHVlID0gRGljdGlvbmFyeTxzdHJpbmcgfCBudW1iZXI+O1xuZXhwb3J0IHR5cGUgTWVkaWFRdWVyaWVzID0gRGljdGlvbmFyeTxWYWx1ZSB8IHN0cmluZyB8IG51bWJlcj47XG5cbmV4cG9ydCBkZWZhdWx0IChcbiAgYnJlYWtwb2ludHNPYmplY3Q6IFJlc3VsdFN0eWxlLFxuICB0aGVtZTogUGljazxUaGVtZSwgJ2JyZWFrcG9pbnRzJyB8ICdkaXJlY3Rpb24nPlxuKSA9PiB7XG4gIGNvbnN0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhicmVha3BvaW50c09iamVjdCk7XG4gIGxldCBtZWRpYVF1ZXJpZXM6IE1lZGlhUXVlcmllcyA9IHt9O1xuICBlbnRyaWVzLmZvckVhY2goKFtrZXksIHZhbHVlXTogW0JyZWFrcG9pbnQsIFZhbHVlXSkgPT4ge1xuICAgIGlmIChrZXkgPT09ICd4cycpIHtcbiAgICAgIG1lZGlhUXVlcmllcyA9IHtcbiAgICAgICAgLi4ubWVkaWFRdWVyaWVzLFxuICAgICAgICAuLi5yZXNvbHZlRGlyZWN0aW9uKHRoZW1lLmRpcmVjdGlvbiwgdmFsdWUpLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVkaWFRdWVyaWVzW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGtleSldID0gcmVzb2x2ZURpcmVjdGlvbihcbiAgICAgICAgdGhlbWUuZGlyZWN0aW9uLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBtZWRpYVF1ZXJpZXM7XG59O1xuIl19