function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { keys } from "@material-ui/core/styles/createBreakpoints";
export default (function (width, breakpoints) {
  if (!width) return undefined;
  var screen = "";
  var found = false;

  var newKeys = _toConsumableArray(keys);

  newKeys.reverse().forEach(function (breakpoint) {
    if (width >= breakpoints.values[breakpoint] && !found) {
      screen = breakpoint;
      found = true;
    }
  });
  return screen;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9tYXBXaWR0aFRvU2NyZWVuLnRzIl0sIm5hbWVzIjpbImtleXMiLCJ3aWR0aCIsImJyZWFrcG9pbnRzIiwidW5kZWZpbmVkIiwic2NyZWVuIiwiZm91bmQiLCJuZXdLZXlzIiwicmV2ZXJzZSIsImZvckVhY2giLCJicmVha3BvaW50IiwidmFsdWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxTQUFTQSxJQUFULFFBQThDLDRDQUE5QztBQUVBLGdCQUFlLFVBQUNDLEtBQUQsRUFBNEJDLFdBQTVCLEVBQXFFO0FBQ2xGLE1BQUksQ0FBQ0QsS0FBTCxFQUFZLE9BQU9FLFNBQVA7QUFDWixNQUFJQyxNQUFNLEdBQUcsRUFBYjtBQUNBLE1BQUlDLEtBQUssR0FBRyxLQUFaOztBQUNBLE1BQU1DLE9BQU8sc0JBQU9OLElBQVAsQ0FBYjs7QUFDQU0sRUFBQUEsT0FBTyxDQUFDQyxPQUFSLEdBQWtCQyxPQUFsQixDQUEwQixVQUFBQyxVQUFVLEVBQUk7QUFDdEMsUUFBSVIsS0FBSyxJQUFJQyxXQUFXLENBQUNRLE1BQVosQ0FBbUJELFVBQW5CLENBQVQsSUFBMkMsQ0FBQ0osS0FBaEQsRUFBdUQ7QUFDckRELE1BQUFBLE1BQU0sR0FBR0ssVUFBVDtBQUNBSixNQUFBQSxLQUFLLEdBQUcsSUFBUjtBQUNEO0FBQ0YsR0FMRDtBQU1BLFNBQU9ELE1BQVA7QUFDRCxDQVpEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga2V5cywgQnJlYWtwb2ludHMsIEJyZWFrcG9pbnQgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzXCJcblxuZXhwb3J0IGRlZmF1bHQgKHdpZHRoOiBudW1iZXIgfCB1bmRlZmluZWQsIGJyZWFrcG9pbnRzOiBCcmVha3BvaW50cyk6IEJyZWFrcG9pbnQgPT4ge1xuICBpZiAoIXdpZHRoKSByZXR1cm4gdW5kZWZpbmVkXG4gIGxldCBzY3JlZW4gPSBcIlwiXG4gIGxldCBmb3VuZCA9IGZhbHNlXG4gIGNvbnN0IG5ld0tleXMgPSBbLi4ua2V5c11cbiAgbmV3S2V5cy5yZXZlcnNlKCkuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICBpZiAod2lkdGggPj0gYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdICYmICFmb3VuZCkge1xuICAgICAgc2NyZWVuID0gYnJlYWtwb2ludFxuICAgICAgZm91bmQgPSB0cnVlXG4gICAgfVxuICB9KVxuICByZXR1cm4gc2NyZWVuIGFzIEJyZWFrcG9pbnRcbn1cbiJdfQ==