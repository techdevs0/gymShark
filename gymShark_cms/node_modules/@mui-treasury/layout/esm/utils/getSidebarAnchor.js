function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

export default (function (configMap) {
  if (!configMap) return undefined;

  if (process.env.NODE_ENV !== "production") {
    var configs = Object.entries(configMap).reduce(function (result, curr) {
      return [].concat(_toConsumableArray(result), [curr]);
    }, []);
    var anchorList = [];
    configs.forEach(function (c) {
      if (!anchorList.includes(c.anchor)) {
        anchorList.push(c.anchor);
      }
    });

    if (anchorList.length > 1) {
      console.warn("It seems like you define multiple anchors in one Sidebar, the 1st anchor found will be used.");
    }
  }

  var keys = Object.keys(configMap);
  return configMap[keys[0]].anchor;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9nZXRTaWRlYmFyQW5jaG9yLnRzIl0sIm5hbWVzIjpbImNvbmZpZ01hcCIsInVuZGVmaW5lZCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImNvbmZpZ3MiLCJPYmplY3QiLCJlbnRyaWVzIiwicmVkdWNlIiwicmVzdWx0IiwiY3VyciIsImFuY2hvckxpc3QiLCJmb3JFYWNoIiwiYyIsImluY2x1ZGVzIiwiYW5jaG9yIiwicHVzaCIsImxlbmd0aCIsImNvbnNvbGUiLCJ3YXJuIiwia2V5cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBR0EsZ0JBQWUsVUFDYkEsU0FEYSxFQUVWO0FBQ0gsTUFBSSxDQUFDQSxTQUFMLEVBQWdCLE9BQU9DLFNBQVA7O0FBQ2hCLE1BQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQTdCLEVBQTJDO0FBQ3pDLFFBQU1DLE9BQTRCLEdBQUdDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlUCxTQUFmLEVBQTBCUSxNQUExQixDQUNuQyxVQUFDQyxNQUFELEVBQVNDLElBQVQ7QUFBQSwwQ0FBc0JELE1BQXRCLElBQThCQyxJQUE5QjtBQUFBLEtBRG1DLEVBRW5DLEVBRm1DLENBQXJDO0FBSUEsUUFBTUMsVUFBMEIsR0FBRyxFQUFuQztBQUNBTixJQUFBQSxPQUFPLENBQUNPLE9BQVIsQ0FBZ0IsVUFBQUMsQ0FBQyxFQUFJO0FBQ25CLFVBQUksQ0FBQ0YsVUFBVSxDQUFDRyxRQUFYLENBQW9CRCxDQUFDLENBQUNFLE1BQXRCLENBQUwsRUFBb0M7QUFDbENKLFFBQUFBLFVBQVUsQ0FBQ0ssSUFBWCxDQUFnQkgsQ0FBQyxDQUFDRSxNQUFsQjtBQUNEO0FBQ0YsS0FKRDs7QUFLQSxRQUFJSixVQUFVLENBQUNNLE1BQVgsR0FBb0IsQ0FBeEIsRUFBMkI7QUFDekJDLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLDhGQURGO0FBR0Q7QUFDRjs7QUFDRCxNQUFNQyxJQUFJLEdBQUdkLE1BQU0sQ0FBQ2MsSUFBUCxDQUFZcEIsU0FBWixDQUFiO0FBQ0EsU0FBT0EsU0FBUyxDQUFDb0IsSUFBSSxDQUFDLENBQUQsQ0FBTCxDQUFULENBQW1CTCxNQUExQjtBQUNELENBdkJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHJhd2VyQW5jaG9yLCBNYXBCcmVha3BvaW50LCBFZGdlU2lkZWJhckNvbmZpZyB9IGZyb20gXCIuLi90eXBlc1wiXG5pbXBvcnQgeyBCcmVha3BvaW50IH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50c1wiXG5cbmV4cG9ydCBkZWZhdWx0IChcbiAgY29uZmlnTWFwOiBNYXBCcmVha3BvaW50PFBpY2s8RWRnZVNpZGViYXJDb25maWcsIFwiYW5jaG9yXCI+PlxuKSA9PiB7XG4gIGlmICghY29uZmlnTWFwKSByZXR1cm4gdW5kZWZpbmVkXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25zdCBjb25maWdzOiBFZGdlU2lkZWJhckNvbmZpZ1tdID0gT2JqZWN0LmVudHJpZXMoY29uZmlnTWFwKS5yZWR1Y2UoXG4gICAgICAocmVzdWx0LCBjdXJyKSA9PiBbLi4ucmVzdWx0LCBjdXJyXSxcbiAgICAgIFtdXG4gICAgKVxuICAgIGNvbnN0IGFuY2hvckxpc3Q6IERyYXdlckFuY2hvcltdID0gW11cbiAgICBjb25maWdzLmZvckVhY2goYyA9PiB7XG4gICAgICBpZiAoIWFuY2hvckxpc3QuaW5jbHVkZXMoYy5hbmNob3IpKSB7XG4gICAgICAgIGFuY2hvckxpc3QucHVzaChjLmFuY2hvcilcbiAgICAgIH1cbiAgICB9KVxuICAgIGlmIChhbmNob3JMaXN0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJJdCBzZWVtcyBsaWtlIHlvdSBkZWZpbmUgbXVsdGlwbGUgYW5jaG9ycyBpbiBvbmUgU2lkZWJhciwgdGhlIDFzdCBhbmNob3IgZm91bmQgd2lsbCBiZSB1c2VkLlwiXG4gICAgICApXG4gICAgfVxuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjb25maWdNYXApIGFzIEJyZWFrcG9pbnRbXVxuICByZXR1cm4gY29uZmlnTWFwW2tleXNbMF1dLmFuY2hvclxufVxuIl19