import { useEffect, useRef } from "react";
import { keys } from "@material-ui/core/styles/createBreakpoints";
import { useScreen } from "./useScreen";
import { useLayoutCtx } from "../contexts";
export var useSidebarAutoCollapse = function useSidebarAutoCollapse(sidebarId) {
  var _useLayoutCtx = useLayoutCtx(),
      collapsedBp = _useLayoutCtx.data.global.autoCollapse[sidebarId],
      setCollapsed = _useLayoutCtx.setCollapsed;

  var screen = useScreen();
  var prevScreen = useRef(screen);
  useEffect(function () {
    if (collapsedBp && screen && prevScreen.current) {
      if (screen === prevScreen.current && keys.indexOf(screen) <= keys.indexOf(collapsedBp)) {
        // first mount on browser
        setCollapsed(sidebarId, true);
      } // when viewport changes


      if (screen !== prevScreen.current) {
        if (keys.indexOf(prevScreen.current) <= keys.indexOf(collapsedBp) && keys.indexOf(collapsedBp) < keys.indexOf(screen)) {
          setCollapsed(sidebarId, false);
        }

        if (keys.indexOf(prevScreen.current) > keys.indexOf(collapsedBp) && keys.indexOf(collapsedBp) >= keys.indexOf(screen)) {
          setCollapsed(sidebarId, true);
        }

        prevScreen.current = screen;
      }
    }
  }, [screen]);
};
export default useSidebarAutoCollapse;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy91c2VTaWRlYmFyQXV0b0NvbGxhcHNlLnRzIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVJlZiIsImtleXMiLCJ1c2VTY3JlZW4iLCJ1c2VMYXlvdXRDdHgiLCJ1c2VTaWRlYmFyQXV0b0NvbGxhcHNlIiwic2lkZWJhcklkIiwiY29sbGFwc2VkQnAiLCJkYXRhIiwiZ2xvYmFsIiwiYXV0b0NvbGxhcHNlIiwic2V0Q29sbGFwc2VkIiwic2NyZWVuIiwicHJldlNjcmVlbiIsImN1cnJlbnQiLCJpbmRleE9mIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxTQUFULEVBQW9CQyxNQUFwQixRQUFrQyxPQUFsQztBQUNBLFNBQVNDLElBQVQsUUFBcUIsNENBQXJCO0FBQ0EsU0FBU0MsU0FBVCxRQUEwQixhQUExQjtBQUNBLFNBQVNDLFlBQVQsUUFBNkIsYUFBN0I7QUFFQSxPQUFPLElBQU1DLHNCQUFzQixHQUFHLFNBQXpCQSxzQkFBeUIsQ0FBQ0MsU0FBRCxFQUF1QjtBQUFBLHNCQVF2REYsWUFBWSxFQVIyQztBQUFBLE1BSXhCRyxXQUp3QixpQkFFekRDLElBRnlELENBR3ZEQyxNQUh1RCxDQUlyREMsWUFKcUQsQ0FJcENKLFNBSm9DO0FBQUEsTUFPekRLLFlBUHlELGlCQU96REEsWUFQeUQ7O0FBUzNELE1BQU1DLE1BQU0sR0FBR1QsU0FBUyxFQUF4QjtBQUNBLE1BQU1VLFVBQVUsR0FBR1osTUFBTSxDQUFDVyxNQUFELENBQXpCO0FBQ0FaLEVBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2QsUUFBSU8sV0FBVyxJQUFJSyxNQUFmLElBQXlCQyxVQUFVLENBQUNDLE9BQXhDLEVBQWlEO0FBQy9DLFVBQ0VGLE1BQU0sS0FBS0MsVUFBVSxDQUFDQyxPQUF0QixJQUNBWixJQUFJLENBQUNhLE9BQUwsQ0FBYUgsTUFBYixLQUF3QlYsSUFBSSxDQUFDYSxPQUFMLENBQWFSLFdBQWIsQ0FGMUIsRUFHRTtBQUNBO0FBQ0FJLFFBQUFBLFlBQVksQ0FBQ0wsU0FBRCxFQUFZLElBQVosQ0FBWjtBQUNELE9BUDhDLENBUy9DOzs7QUFDQSxVQUFJTSxNQUFNLEtBQUtDLFVBQVUsQ0FBQ0MsT0FBMUIsRUFBbUM7QUFDakMsWUFDRVosSUFBSSxDQUFDYSxPQUFMLENBQWFGLFVBQVUsQ0FBQ0MsT0FBeEIsS0FBb0NaLElBQUksQ0FBQ2EsT0FBTCxDQUFhUixXQUFiLENBQXBDLElBQ0FMLElBQUksQ0FBQ2EsT0FBTCxDQUFhUixXQUFiLElBQTRCTCxJQUFJLENBQUNhLE9BQUwsQ0FBYUgsTUFBYixDQUY5QixFQUdFO0FBQ0FELFVBQUFBLFlBQVksQ0FBQ0wsU0FBRCxFQUFZLEtBQVosQ0FBWjtBQUNEOztBQUVELFlBQ0VKLElBQUksQ0FBQ2EsT0FBTCxDQUFhRixVQUFVLENBQUNDLE9BQXhCLElBQW1DWixJQUFJLENBQUNhLE9BQUwsQ0FBYVIsV0FBYixDQUFuQyxJQUNBTCxJQUFJLENBQUNhLE9BQUwsQ0FBYVIsV0FBYixLQUE2QkwsSUFBSSxDQUFDYSxPQUFMLENBQWFILE1BQWIsQ0FGL0IsRUFHRTtBQUNBRCxVQUFBQSxZQUFZLENBQUNMLFNBQUQsRUFBWSxJQUFaLENBQVo7QUFDRDs7QUFFRE8sUUFBQUEsVUFBVSxDQUFDQyxPQUFYLEdBQXFCRixNQUFyQjtBQUNEO0FBQ0Y7QUFDRixHQTdCUSxFQTZCTixDQUFDQSxNQUFELENBN0JNLENBQVQ7QUE4QkQsQ0F6Q007QUEyQ1AsZUFBZVAsc0JBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBrZXlzIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50c1wiXG5pbXBvcnQgeyB1c2VTY3JlZW4gfSBmcm9tIFwiLi91c2VTY3JlZW5cIlxuaW1wb3J0IHsgdXNlTGF5b3V0Q3R4IH0gZnJvbSBcIi4uL2NvbnRleHRzXCJcblxuZXhwb3J0IGNvbnN0IHVzZVNpZGViYXJBdXRvQ29sbGFwc2UgPSAoc2lkZWJhcklkOiBzdHJpbmcpID0+IHtcbiAgY29uc3Qge1xuICAgIGRhdGE6IHtcbiAgICAgIGdsb2JhbDoge1xuICAgICAgICBhdXRvQ29sbGFwc2U6IHsgW3NpZGViYXJJZF06IGNvbGxhcHNlZEJwIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgc2V0Q29sbGFwc2VkLFxuICB9ID0gdXNlTGF5b3V0Q3R4KClcbiAgY29uc3Qgc2NyZWVuID0gdXNlU2NyZWVuKClcbiAgY29uc3QgcHJldlNjcmVlbiA9IHVzZVJlZihzY3JlZW4pXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGNvbGxhcHNlZEJwICYmIHNjcmVlbiAmJiBwcmV2U2NyZWVuLmN1cnJlbnQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgc2NyZWVuID09PSBwcmV2U2NyZWVuLmN1cnJlbnQgJiZcbiAgICAgICAga2V5cy5pbmRleE9mKHNjcmVlbikgPD0ga2V5cy5pbmRleE9mKGNvbGxhcHNlZEJwKVxuICAgICAgKSB7XG4gICAgICAgIC8vIGZpcnN0IG1vdW50IG9uIGJyb3dzZXJcbiAgICAgICAgc2V0Q29sbGFwc2VkKHNpZGViYXJJZCwgdHJ1ZSlcbiAgICAgIH1cblxuICAgICAgLy8gd2hlbiB2aWV3cG9ydCBjaGFuZ2VzXG4gICAgICBpZiAoc2NyZWVuICE9PSBwcmV2U2NyZWVuLmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleXMuaW5kZXhPZihwcmV2U2NyZWVuLmN1cnJlbnQpIDw9IGtleXMuaW5kZXhPZihjb2xsYXBzZWRCcCkgJiZcbiAgICAgICAgICBrZXlzLmluZGV4T2YoY29sbGFwc2VkQnApIDwga2V5cy5pbmRleE9mKHNjcmVlbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgc2V0Q29sbGFwc2VkKHNpZGViYXJJZCwgZmFsc2UpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5cy5pbmRleE9mKHByZXZTY3JlZW4uY3VycmVudCkgPiBrZXlzLmluZGV4T2YoY29sbGFwc2VkQnApICYmXG4gICAgICAgICAga2V5cy5pbmRleE9mKGNvbGxhcHNlZEJwKSA+PSBrZXlzLmluZGV4T2Yoc2NyZWVuKVxuICAgICAgICApIHtcbiAgICAgICAgICBzZXRDb2xsYXBzZWQoc2lkZWJhcklkLCB0cnVlKVxuICAgICAgICB9XG5cbiAgICAgICAgcHJldlNjcmVlbi5jdXJyZW50ID0gc2NyZWVuXG4gICAgICB9XG4gICAgfVxuICB9LCBbc2NyZWVuXSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlU2lkZWJhckF1dG9Db2xsYXBzZVxuIl19