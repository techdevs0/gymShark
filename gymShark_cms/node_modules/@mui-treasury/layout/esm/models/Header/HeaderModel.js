function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { isHeaderClipped } from '../../utils';
import createEffect from '../../effects/Header/HeaderEffect';
import createWidthInterface from '../Width';
import createMarginInterface from '../Margin';
export default (function (config, sidebarEffects) {
  var headerEffect = createEffect(config);
  var marginInterfaces = [];
  var widthInterfaces = [];
  sidebarEffects.forEach(function (_ref) {
    var sidebarId = _ref.id,
        getObjectWidth = _ref.getObjectWidth,
        getObjectMargin = _ref.getObjectMargin;
    widthInterfaces.push(isHeaderClipped(config, sidebarId) ? createWidthInterface(0) : getObjectWidth(config.id));
    marginInterfaces.push(isHeaderClipped(config, sidebarId) ? createMarginInterface({
      marginLeft: 0,
      marginRight: 0
    }) : getObjectMargin(config.id));
  });
  var marginStyle = marginInterfaces.length > 0 ? marginInterfaces.reduce(function (result, current) {
    return result.combine(current);
  }).getStyle() : undefined;
  var widthStyle = widthInterfaces.length > 0 ? widthInterfaces.reduce(function (result, current) {
    return result.combine(current);
  }).getStyle() : undefined;
  return {
    getStyle: function getStyle() {
      return _extends(_extends(_extends(_extends({
        height: config.hidden ? 0 : config.initialHeight,
        position: config.position
      }, config.top !== undefined && {
        top: config.top
      }), marginStyle), widthStyle), headerEffect.getHeaderZIndex());
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvSGVhZGVyL0hlYWRlck1vZGVsLnRzIl0sIm5hbWVzIjpbImlzSGVhZGVyQ2xpcHBlZCIsImNyZWF0ZUVmZmVjdCIsImNyZWF0ZVdpZHRoSW50ZXJmYWNlIiwiY3JlYXRlTWFyZ2luSW50ZXJmYWNlIiwiY29uZmlnIiwic2lkZWJhckVmZmVjdHMiLCJoZWFkZXJFZmZlY3QiLCJtYXJnaW5JbnRlcmZhY2VzIiwid2lkdGhJbnRlcmZhY2VzIiwiZm9yRWFjaCIsInNpZGViYXJJZCIsImlkIiwiZ2V0T2JqZWN0V2lkdGgiLCJnZXRPYmplY3RNYXJnaW4iLCJwdXNoIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luU3R5bGUiLCJsZW5ndGgiLCJyZWR1Y2UiLCJyZXN1bHQiLCJjdXJyZW50IiwiY29tYmluZSIsImdldFN0eWxlIiwidW5kZWZpbmVkIiwid2lkdGhTdHlsZSIsImhlaWdodCIsImhpZGRlbiIsImluaXRpYWxIZWlnaHQiLCJwb3NpdGlvbiIsInRvcCIsImdldEhlYWRlclpJbmRleCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxlQUFULFFBQWdDLGFBQWhDO0FBQ0EsT0FBT0MsWUFBUCxNQUF5QixtQ0FBekI7QUFDQSxPQUFPQyxvQkFBUCxNQUFpQyxVQUFqQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLFdBQWxDO0FBR0EsZ0JBQWUsVUFBQ0MsTUFBRCxFQUF1QkMsY0FBdkIsRUFBNEQ7QUFDekUsTUFBTUMsWUFBWSxHQUFHTCxZQUFZLENBQUNHLE1BQUQsQ0FBakM7QUFFQSxNQUFNRyxnQkFBMkIsR0FBRyxFQUFwQztBQUNBLE1BQU1DLGVBQXlCLEdBQUcsRUFBbEM7QUFFQUgsRUFBQUEsY0FBYyxDQUFDSSxPQUFmLENBQ0UsZ0JBQXdEO0FBQUEsUUFBakRDLFNBQWlELFFBQXJEQyxFQUFxRDtBQUFBLFFBQXRDQyxjQUFzQyxRQUF0Q0EsY0FBc0M7QUFBQSxRQUF0QkMsZUFBc0IsUUFBdEJBLGVBQXNCO0FBQ3RETCxJQUFBQSxlQUFlLENBQUNNLElBQWhCLENBQ0VkLGVBQWUsQ0FBQ0ksTUFBRCxFQUFTTSxTQUFULENBQWYsR0FDSVIsb0JBQW9CLENBQUMsQ0FBRCxDQUR4QixHQUVJVSxjQUFjLENBQUNSLE1BQU0sQ0FBQ08sRUFBUixDQUhwQjtBQUtBSixJQUFBQSxnQkFBZ0IsQ0FBQ08sSUFBakIsQ0FDRWQsZUFBZSxDQUFDSSxNQUFELEVBQVNNLFNBQVQsQ0FBZixHQUNJUCxxQkFBcUIsQ0FBQztBQUFFWSxNQUFBQSxVQUFVLEVBQUUsQ0FBZDtBQUFpQkMsTUFBQUEsV0FBVyxFQUFFO0FBQTlCLEtBQUQsQ0FEekIsR0FFSUgsZUFBZSxDQUFDVCxNQUFNLENBQUNPLEVBQVIsQ0FIckI7QUFLRCxHQVpIO0FBZUEsTUFBTU0sV0FBVyxHQUNmVixnQkFBZ0IsQ0FBQ1csTUFBakIsR0FBMEIsQ0FBMUIsR0FDSVgsZ0JBQWdCLENBQ2JZLE1BREgsQ0FDVSxVQUFDQyxNQUFELEVBQVNDLE9BQVQ7QUFBQSxXQUFxQkQsTUFBTSxDQUFDRSxPQUFQLENBQWVELE9BQWYsQ0FBckI7QUFBQSxHQURWLEVBRUdFLFFBRkgsRUFESixHQUlJQyxTQUxOO0FBTUEsTUFBTUMsVUFBVSxHQUNkakIsZUFBZSxDQUFDVSxNQUFoQixHQUF5QixDQUF6QixHQUNJVixlQUFlLENBQ1pXLE1BREgsQ0FDVSxVQUFDQyxNQUFELEVBQVNDLE9BQVQ7QUFBQSxXQUFxQkQsTUFBTSxDQUFDRSxPQUFQLENBQWVELE9BQWYsQ0FBckI7QUFBQSxHQURWLEVBRUdFLFFBRkgsRUFESixHQUlJQyxTQUxOO0FBTUEsU0FBTztBQUNMRCxJQUFBQSxRQUFRLEVBQUU7QUFBQTtBQUNSRyxRQUFBQSxNQUFNLEVBQUV0QixNQUFNLENBQUN1QixNQUFQLEdBQWdCLENBQWhCLEdBQW9CdkIsTUFBTSxDQUFDd0IsYUFEM0I7QUFFUkMsUUFBQUEsUUFBUSxFQUFFekIsTUFBTSxDQUFDeUI7QUFGVCxTQUdMekIsTUFBTSxDQUFDMEIsR0FBUCxLQUFlTixTQUFmLElBQTRCO0FBQUVNLFFBQUFBLEdBQUcsRUFBRTFCLE1BQU0sQ0FBQzBCO0FBQWQsT0FIdkIsR0FJTGIsV0FKSyxHQUtMUSxVQUxLLEdBTUxuQixZQUFZLENBQUN5QixlQUFiLEVBTks7QUFBQTtBQURMLEdBQVA7QUFVRCxDQTNDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSGVhZGVyQ2xpcHBlZCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCBjcmVhdGVFZmZlY3QgZnJvbSAnLi4vLi4vZWZmZWN0cy9IZWFkZXIvSGVhZGVyRWZmZWN0JztcbmltcG9ydCBjcmVhdGVXaWR0aEludGVyZmFjZSBmcm9tICcuLi9XaWR0aCc7XG5pbXBvcnQgY3JlYXRlTWFyZ2luSW50ZXJmYWNlIGZyb20gJy4uL01hcmdpbic7XG5pbXBvcnQgeyBJU2lkZWJhckVmZmVjdCwgSGVhZGVyQ29uZmlnLCBJTWFyZ2luLCBJV2lkdGggfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IChjb25maWc6IEhlYWRlckNvbmZpZywgc2lkZWJhckVmZmVjdHM6IElTaWRlYmFyRWZmZWN0W10pID0+IHtcbiAgY29uc3QgaGVhZGVyRWZmZWN0ID0gY3JlYXRlRWZmZWN0KGNvbmZpZyk7XG5cbiAgY29uc3QgbWFyZ2luSW50ZXJmYWNlczogSU1hcmdpbltdID0gW107XG4gIGNvbnN0IHdpZHRoSW50ZXJmYWNlczogSVdpZHRoW10gPSBbXTtcblxuICBzaWRlYmFyRWZmZWN0cy5mb3JFYWNoKFxuICAgICh7IGlkOiBzaWRlYmFySWQsIGdldE9iamVjdFdpZHRoLCBnZXRPYmplY3RNYXJnaW4gfSkgPT4ge1xuICAgICAgd2lkdGhJbnRlcmZhY2VzLnB1c2goXG4gICAgICAgIGlzSGVhZGVyQ2xpcHBlZChjb25maWcsIHNpZGViYXJJZClcbiAgICAgICAgICA/IGNyZWF0ZVdpZHRoSW50ZXJmYWNlKDApXG4gICAgICAgICAgOiBnZXRPYmplY3RXaWR0aChjb25maWcuaWQpXG4gICAgICApO1xuICAgICAgbWFyZ2luSW50ZXJmYWNlcy5wdXNoKFxuICAgICAgICBpc0hlYWRlckNsaXBwZWQoY29uZmlnLCBzaWRlYmFySWQpXG4gICAgICAgICAgPyBjcmVhdGVNYXJnaW5JbnRlcmZhY2UoeyBtYXJnaW5MZWZ0OiAwLCBtYXJnaW5SaWdodDogMCB9KVxuICAgICAgICAgIDogZ2V0T2JqZWN0TWFyZ2luKGNvbmZpZy5pZClcbiAgICAgICk7XG4gICAgfVxuICApO1xuXG4gIGNvbnN0IG1hcmdpblN0eWxlID1cbiAgICBtYXJnaW5JbnRlcmZhY2VzLmxlbmd0aCA+IDBcbiAgICAgID8gbWFyZ2luSW50ZXJmYWNlc1xuICAgICAgICAgIC5yZWR1Y2UoKHJlc3VsdCwgY3VycmVudCkgPT4gcmVzdWx0LmNvbWJpbmUoY3VycmVudCkpXG4gICAgICAgICAgLmdldFN0eWxlKClcbiAgICAgIDogdW5kZWZpbmVkO1xuICBjb25zdCB3aWR0aFN0eWxlID1cbiAgICB3aWR0aEludGVyZmFjZXMubGVuZ3RoID4gMFxuICAgICAgPyB3aWR0aEludGVyZmFjZXNcbiAgICAgICAgICAucmVkdWNlKChyZXN1bHQsIGN1cnJlbnQpID0+IHJlc3VsdC5jb21iaW5lKGN1cnJlbnQpKVxuICAgICAgICAgIC5nZXRTdHlsZSgpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIHtcbiAgICBnZXRTdHlsZTogKCkgPT4gKHtcbiAgICAgIGhlaWdodDogY29uZmlnLmhpZGRlbiA/IDAgOiBjb25maWcuaW5pdGlhbEhlaWdodCxcbiAgICAgIHBvc2l0aW9uOiBjb25maWcucG9zaXRpb24sXG4gICAgICAuLi5jb25maWcudG9wICE9PSB1bmRlZmluZWQgJiYgeyB0b3A6IGNvbmZpZy50b3AgfSxcbiAgICAgIC4uLm1hcmdpblN0eWxlLFxuICAgICAgLi4ud2lkdGhTdHlsZSxcbiAgICAgIC4uLmhlYWRlckVmZmVjdC5nZXRIZWFkZXJaSW5kZXgoKSxcbiAgICB9KSxcbiAgfTtcbn07XG4iXX0=