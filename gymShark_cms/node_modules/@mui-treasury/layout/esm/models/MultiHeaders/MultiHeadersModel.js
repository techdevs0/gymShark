function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { plusCalc, toValidCssValue } from '../../utils';
export default (function (configs) {
  var getDefaultValue = function getDefaultValue(value, defaultValue) {
    if (!configs.length) {
      return defaultValue;
    }

    return value;
  };

  return {
    relativeConfigs: configs.filter(function (c) {
      return c.position === 'relative';
    }),
    nonRelativeConfigs: configs.filter(function (c) {
      return c.position !== 'relative';
    }),
    totalHeight: getDefaultValue(configs.length === 1 ? toValidCssValue(configs[0].initialHeight) : plusCalc.apply(void 0, _toConsumableArray(configs.map(function (c) {
      return c.initialHeight;
    }))), 0),
    maxHeightFromTop: getDefaultValue("max(".concat(configs.filter(function (c) {
      return (!c.top || typeof c.top === 'number') && typeof c.initialHeight === 'number';
    }).map(function (c) {
      return plusCalc(c.top, c.initialHeight);
    }).join(', '), ")"), 0)
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvTXVsdGlIZWFkZXJzL011bHRpSGVhZGVyc01vZGVsLnRzIl0sIm5hbWVzIjpbInBsdXNDYWxjIiwidG9WYWxpZENzc1ZhbHVlIiwiY29uZmlncyIsImdldERlZmF1bHRWYWx1ZSIsInZhbHVlIiwiZGVmYXVsdFZhbHVlIiwibGVuZ3RoIiwicmVsYXRpdmVDb25maWdzIiwiZmlsdGVyIiwiYyIsInBvc2l0aW9uIiwibm9uUmVsYXRpdmVDb25maWdzIiwidG90YWxIZWlnaHQiLCJpbml0aWFsSGVpZ2h0IiwibWFwIiwibWF4SGVpZ2h0RnJvbVRvcCIsInRvcCIsImpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUNBLFNBQVNBLFFBQVQsRUFBbUJDLGVBQW5CLFFBQTBDLGFBQTFDO0FBRUEsZ0JBQWUsVUFBQ0MsT0FBRCxFQUE2QjtBQUMxQyxNQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQU9DLEtBQVAsRUFBaUJDLFlBQWpCLEVBQXFDO0FBQzNELFFBQUksQ0FBQ0gsT0FBTyxDQUFDSSxNQUFiLEVBQXFCO0FBQ25CLGFBQU9ELFlBQVA7QUFDRDs7QUFDRCxXQUFPRCxLQUFQO0FBQ0QsR0FMRDs7QUFNQSxTQUFPO0FBQ0xHLElBQUFBLGVBQWUsRUFBRUwsT0FBTyxDQUFDTSxNQUFSLENBQWUsVUFBQUMsQ0FBQztBQUFBLGFBQUlBLENBQUMsQ0FBQ0MsUUFBRixLQUFlLFVBQW5CO0FBQUEsS0FBaEIsQ0FEWjtBQUVMQyxJQUFBQSxrQkFBa0IsRUFBRVQsT0FBTyxDQUFDTSxNQUFSLENBQWUsVUFBQUMsQ0FBQztBQUFBLGFBQUlBLENBQUMsQ0FBQ0MsUUFBRixLQUFlLFVBQW5CO0FBQUEsS0FBaEIsQ0FGZjtBQUdMRSxJQUFBQSxXQUFXLEVBQUVULGVBQWUsQ0FDMUJELE9BQU8sQ0FBQ0ksTUFBUixLQUFtQixDQUFuQixHQUNJTCxlQUFlLENBQUNDLE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBV1csYUFBWixDQURuQixHQUVJYixRQUFRLE1BQVIsNEJBQVlFLE9BQU8sQ0FBQ1ksR0FBUixDQUFZLFVBQUFMLENBQUM7QUFBQSxhQUFJQSxDQUFDLENBQUNJLGFBQU47QUFBQSxLQUFiLENBQVosRUFIc0IsRUFJMUIsQ0FKMEIsQ0FIdkI7QUFTTEUsSUFBQUEsZ0JBQWdCLEVBQUVaLGVBQWUsZUFDeEJELE9BQU8sQ0FDWE0sTUFESSxDQUVILFVBQUFDLENBQUM7QUFBQSxhQUNDLENBQUMsQ0FBQ0EsQ0FBQyxDQUFDTyxHQUFILElBQVUsT0FBT1AsQ0FBQyxDQUFDTyxHQUFULEtBQWlCLFFBQTVCLEtBQ0EsT0FBT1AsQ0FBQyxDQUFDSSxhQUFULEtBQTJCLFFBRjVCO0FBQUEsS0FGRSxFQU1KQyxHQU5JLENBTUEsVUFBQUwsQ0FBQztBQUFBLGFBQUlULFFBQVEsQ0FBQ1MsQ0FBQyxDQUFDTyxHQUFILEVBQVFQLENBQUMsQ0FBQ0ksYUFBVixDQUFaO0FBQUEsS0FORCxFQU9KSSxJQVBJLENBT0MsSUFQRCxDQUR3QixRQVMvQixDQVQrQjtBQVQ1QixHQUFQO0FBcUJELENBNUJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGVhZGVyQ29uZmlnIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgcGx1c0NhbGMsIHRvVmFsaWRDc3NWYWx1ZSB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgKGNvbmZpZ3M6IEhlYWRlckNvbmZpZ1tdKSA9PiB7XG4gIGNvbnN0IGdldERlZmF1bHRWYWx1ZSA9IDxULCBLPih2YWx1ZTogVCwgZGVmYXVsdFZhbHVlOiBLKSA9PiB7XG4gICAgaWYgKCFjb25maWdzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICByZXR1cm4ge1xuICAgIHJlbGF0aXZlQ29uZmlnczogY29uZmlncy5maWx0ZXIoYyA9PiBjLnBvc2l0aW9uID09PSAncmVsYXRpdmUnKSxcbiAgICBub25SZWxhdGl2ZUNvbmZpZ3M6IGNvbmZpZ3MuZmlsdGVyKGMgPT4gYy5wb3NpdGlvbiAhPT0gJ3JlbGF0aXZlJyksXG4gICAgdG90YWxIZWlnaHQ6IGdldERlZmF1bHRWYWx1ZShcbiAgICAgIGNvbmZpZ3MubGVuZ3RoID09PSAxXG4gICAgICAgID8gdG9WYWxpZENzc1ZhbHVlKGNvbmZpZ3NbMF0uaW5pdGlhbEhlaWdodClcbiAgICAgICAgOiBwbHVzQ2FsYyguLi5jb25maWdzLm1hcChjID0+IGMuaW5pdGlhbEhlaWdodCkpLFxuICAgICAgMFxuICAgICksXG4gICAgbWF4SGVpZ2h0RnJvbVRvcDogZ2V0RGVmYXVsdFZhbHVlKFxuICAgICAgYG1heCgke2NvbmZpZ3NcbiAgICAgICAgLmZpbHRlcihcbiAgICAgICAgICBjID0+XG4gICAgICAgICAgICAoIWMudG9wIHx8IHR5cGVvZiBjLnRvcCA9PT0gJ251bWJlcicpICYmXG4gICAgICAgICAgICB0eXBlb2YgYy5pbml0aWFsSGVpZ2h0ID09PSAnbnVtYmVyJ1xuICAgICAgICApXG4gICAgICAgIC5tYXAoYyA9PiBwbHVzQ2FsYyhjLnRvcCwgYy5pbml0aWFsSGVpZ2h0KSlcbiAgICAgICAgLmpvaW4oJywgJyl9KWAsXG4gICAgICAwXG4gICAgKSxcbiAgfTtcbn07XG4iXX0=