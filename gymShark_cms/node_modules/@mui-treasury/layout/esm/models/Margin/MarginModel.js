function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { isNil, toValidCssValue } from "../../utils";
export var getCssMargin = function getCssMargin(m) {
  if (typeof m === "string") {
    return "calc(".concat(m, ")");
  }

  return m;
};

var transformMargin = function transformMargin(m) {
  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (val) {
    return val;
  };
  return _extends(_extends({}, !isNil(m.marginLeft) && {
    marginLeft: fn(m.marginLeft)
  }), !isNil(m.marginRight) && {
    marginRight: fn(m.marginRight)
  });
};

var getCssValue = function getCssValue(v1, v2) {
  if (isNil(v1)) return v2;
  if (isNil(v2)) return v1;
  return "".concat(toValidCssValue(v1), " + ").concat(toValidCssValue(v2));
};

export var combineMargin = function combineMargin(m1, m2) {
  if (!m1 && !m2) return undefined;
  if (!m1 && m2) return m2;
  if (m1 && !m2) return m1;
  var marginLeft = getCssValue(m1.marginLeft, m2.marginLeft);
  var marginRight = getCssValue(m1.marginRight, m2.marginRight);
  return transformMargin({
    marginLeft: marginLeft,
    marginRight: marginRight
  });
};

var createMarginInterface = function createMarginInterface(value) {
  return {
    value: value,
    combine: function combine(m) {
      return createMarginInterface(combineMargin(value, m.value));
    },
    getStyle: function getStyle() {
      return transformMargin(value, getCssMargin);
    }
  };
};

export default createMarginInterface;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvTWFyZ2luL01hcmdpbk1vZGVsLnRzIl0sIm5hbWVzIjpbImlzTmlsIiwidG9WYWxpZENzc1ZhbHVlIiwiZ2V0Q3NzTWFyZ2luIiwibSIsInRyYW5zZm9ybU1hcmdpbiIsImZuIiwidmFsIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiZ2V0Q3NzVmFsdWUiLCJ2MSIsInYyIiwiY29tYmluZU1hcmdpbiIsIm0xIiwibTIiLCJ1bmRlZmluZWQiLCJjcmVhdGVNYXJnaW5JbnRlcmZhY2UiLCJ2YWx1ZSIsImNvbWJpbmUiLCJnZXRTdHlsZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxLQUFULEVBQWdCQyxlQUFoQixRQUF1QyxhQUF2QztBQUdBLE9BQU8sSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBQ0MsQ0FBRCxFQUF5QjtBQUNuRCxNQUFJLE9BQU9BLENBQVAsS0FBYSxRQUFqQixFQUEyQjtBQUN6QiwwQkFBZUEsQ0FBZjtBQUNEOztBQUNELFNBQU9BLENBQVA7QUFDRCxDQUxNOztBQU9QLElBQU1DLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FDdEJELENBRHNCO0FBQUEsTUFFdEJFLEVBRnNCLHVFQUUwQixVQUFBQyxHQUFHO0FBQUEsV0FBSUEsR0FBSjtBQUFBLEdBRjdCO0FBQUEsK0JBSWxCLENBQUNOLEtBQUssQ0FBQ0csQ0FBQyxDQUFDSSxVQUFILENBQU4sSUFBd0I7QUFDMUJBLElBQUFBLFVBQVUsRUFBRUYsRUFBRSxDQUFDRixDQUFDLENBQUNJLFVBQUg7QUFEWSxHQUpOLEdBT2xCLENBQUNQLEtBQUssQ0FBQ0csQ0FBQyxDQUFDSyxXQUFILENBQU4sSUFBeUI7QUFDM0JBLElBQUFBLFdBQVcsRUFBRUgsRUFBRSxDQUFDRixDQUFDLENBQUNLLFdBQUg7QUFEWSxHQVBQO0FBQUEsQ0FBeEI7O0FBWUEsSUFBTUMsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBQ0MsRUFBRCxFQUFzQkMsRUFBdEIsRUFBOEM7QUFDaEUsTUFBSVgsS0FBSyxDQUFDVSxFQUFELENBQVQsRUFBZSxPQUFPQyxFQUFQO0FBQ2YsTUFBSVgsS0FBSyxDQUFDVyxFQUFELENBQVQsRUFBZSxPQUFPRCxFQUFQO0FBQ2YsbUJBQVVULGVBQWUsQ0FBQ1MsRUFBRCxDQUF6QixnQkFBbUNULGVBQWUsQ0FBQ1UsRUFBRCxDQUFsRDtBQUNELENBSkQ7O0FBTUEsT0FBTyxJQUFNQyxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQUNDLEVBQUQsRUFBa0JDLEVBQWxCLEVBQXNDO0FBQ2pFLE1BQUksQ0FBQ0QsRUFBRCxJQUFPLENBQUNDLEVBQVosRUFBZ0IsT0FBT0MsU0FBUDtBQUNoQixNQUFJLENBQUNGLEVBQUQsSUFBT0MsRUFBWCxFQUFlLE9BQU9BLEVBQVA7QUFDZixNQUFJRCxFQUFFLElBQUksQ0FBQ0MsRUFBWCxFQUFlLE9BQU9ELEVBQVA7QUFDZixNQUFNTixVQUFVLEdBQUdFLFdBQVcsQ0FBQ0ksRUFBRSxDQUFDTixVQUFKLEVBQWdCTyxFQUFFLENBQUNQLFVBQW5CLENBQTlCO0FBQ0EsTUFBTUMsV0FBVyxHQUFHQyxXQUFXLENBQUNJLEVBQUUsQ0FBQ0wsV0FBSixFQUFpQk0sRUFBRSxDQUFDTixXQUFwQixDQUEvQjtBQUNBLFNBQU9KLGVBQWUsQ0FBQztBQUFFRyxJQUFBQSxVQUFVLEVBQVZBLFVBQUY7QUFBY0MsSUFBQUEsV0FBVyxFQUFYQTtBQUFkLEdBQUQsQ0FBdEI7QUFDRCxDQVBNOztBQVNQLElBQU1RLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBd0IsQ0FBQ0MsS0FBRCxFQUFpQztBQUM3RCxTQUFPO0FBQ0xBLElBQUFBLEtBQUssRUFBTEEsS0FESztBQUVMQyxJQUFBQSxPQUFPLEVBQUUsaUJBQUFmLENBQUM7QUFBQSxhQUFJYSxxQkFBcUIsQ0FBQ0osYUFBYSxDQUFDSyxLQUFELEVBQVFkLENBQUMsQ0FBQ2MsS0FBVixDQUFkLENBQXpCO0FBQUEsS0FGTDtBQUdMRSxJQUFBQSxRQUFRLEVBQUU7QUFBQSxhQUFNZixlQUFlLENBQUNhLEtBQUQsRUFBUWYsWUFBUixDQUFyQjtBQUFBO0FBSEwsR0FBUDtBQUtELENBTkQ7O0FBUUEsZUFBZWMscUJBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05pbCwgdG9WYWxpZENzc1ZhbHVlIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCJcbmltcG9ydCB7IE1hcmdpblN0eWxlLCBJTWFyZ2luIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCJcblxuZXhwb3J0IGNvbnN0IGdldENzc01hcmdpbiA9IChtPzogc3RyaW5nIHwgbnVtYmVyKSA9PiB7XG4gIGlmICh0eXBlb2YgbSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBgY2FsYygke219KWBcbiAgfVxuICByZXR1cm4gbVxufVxuXG5jb25zdCB0cmFuc2Zvcm1NYXJnaW4gPSAoXG4gIG06IE1hcmdpblN0eWxlLFxuICBmbjogKHZhbDogc3RyaW5nIHwgbnVtYmVyKSA9PiBzdHJpbmcgfCBudW1iZXIgPSB2YWwgPT4gdmFsXG4pID0+ICh7XG4gIC4uLighaXNOaWwobS5tYXJnaW5MZWZ0KSAmJiB7XG4gICAgbWFyZ2luTGVmdDogZm4obS5tYXJnaW5MZWZ0KSxcbiAgfSksXG4gIC4uLighaXNOaWwobS5tYXJnaW5SaWdodCkgJiYge1xuICAgIG1hcmdpblJpZ2h0OiBmbihtLm1hcmdpblJpZ2h0KSxcbiAgfSksXG59KVxuXG5jb25zdCBnZXRDc3NWYWx1ZSA9ICh2MTogc3RyaW5nIHwgbnVtYmVyLCB2Mjogc3RyaW5nIHwgbnVtYmVyKSA9PiB7XG4gIGlmIChpc05pbCh2MSkpIHJldHVybiB2MlxuICBpZiAoaXNOaWwodjIpKSByZXR1cm4gdjFcbiAgcmV0dXJuIGAke3RvVmFsaWRDc3NWYWx1ZSh2MSl9ICsgJHt0b1ZhbGlkQ3NzVmFsdWUodjIpfWBcbn1cblxuZXhwb3J0IGNvbnN0IGNvbWJpbmVNYXJnaW4gPSAobTE6IE1hcmdpblN0eWxlLCBtMjogTWFyZ2luU3R5bGUpID0+IHtcbiAgaWYgKCFtMSAmJiAhbTIpIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFtMSAmJiBtMikgcmV0dXJuIG0yXG4gIGlmIChtMSAmJiAhbTIpIHJldHVybiBtMVxuICBjb25zdCBtYXJnaW5MZWZ0ID0gZ2V0Q3NzVmFsdWUobTEubWFyZ2luTGVmdCwgbTIubWFyZ2luTGVmdClcbiAgY29uc3QgbWFyZ2luUmlnaHQgPSBnZXRDc3NWYWx1ZShtMS5tYXJnaW5SaWdodCwgbTIubWFyZ2luUmlnaHQpXG4gIHJldHVybiB0cmFuc2Zvcm1NYXJnaW4oeyBtYXJnaW5MZWZ0LCBtYXJnaW5SaWdodCB9KVxufVxuXG5jb25zdCBjcmVhdGVNYXJnaW5JbnRlcmZhY2UgPSAodmFsdWU6IE1hcmdpblN0eWxlKTogSU1hcmdpbiA9PiB7XG4gIHJldHVybiB7XG4gICAgdmFsdWUsXG4gICAgY29tYmluZTogbSA9PiBjcmVhdGVNYXJnaW5JbnRlcmZhY2UoY29tYmluZU1hcmdpbih2YWx1ZSwgbS52YWx1ZSkpLFxuICAgIGdldFN0eWxlOiAoKSA9PiB0cmFuc2Zvcm1NYXJnaW4odmFsdWUsIGdldENzc01hcmdpbiksXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTWFyZ2luSW50ZXJmYWNlXG4iXX0=