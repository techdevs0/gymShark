function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { makeStyles, useTheme } from '@material-ui/core/styles';
import IconButton from '@material-ui/core/IconButton';
import ArrowLeft from '@material-ui/icons/KeyboardArrowLeftRounded';
import ArrowRight from '@material-ui/icons/KeyboardArrowRightRounded';
import MenuRounded from '@material-ui/icons/MenuRounded';
import { useSidebarTrigger } from '../../hooks';
import { generateStyledProxyCreator } from '../Shared/StyledProxy';
export default (function (styled) {
  var styledProxy = generateStyledProxyCreator(styled);
  var StyledIconBtn = styledProxy(IconButton);
  var useStyles = makeStyles(function (_ref) {
    var spacing = _ref.spacing,
        direction = _ref.direction;
    return {
      // @ts-ignore
      root: function root(_ref2) {
        var anchor = _ref2.anchor;
        return _extends(_extends({}, anchor === 'left' && {
          marginLeft: spacing(direction === 'rtl' ? 1 : -1),
          marginRight: spacing(direction === 'rtl' ? -1 : 1)
        }), anchor === 'right' && {
          marginLeft: spacing(direction === 'rtl' ? -1 : 1),
          marginRight: spacing(direction === 'rtl' ? 1 : -1)
        });
      }
    };
  }, {
    name: 'SidebarTrigger'
  });

  var SidebarTrigger = function SidebarTrigger(_ref3) {
    var children = _ref3.children,
        sidebarId = _ref3.sidebarId,
        _onClick = _ref3.onClick,
        SvgIconProps = _ref3.SvgIconProps,
        props = _objectWithoutProperties(_ref3, ["children", "sidebarId", "onClick", "SvgIconProps"]);

    var _useSidebarTrigger = useSidebarTrigger(sidebarId, 'SidebarTrigger'),
        id = _useSidebarTrigger.id,
        anchor = _useSidebarTrigger.anchor,
        hiddenStyles = _useSidebarTrigger.hiddenStyles,
        state = _useSidebarTrigger.state,
        setOpen = _useSidebarTrigger.setOpen;

    var theme = useTheme();
    var classes = useStyles(_extends(_extends({}, props), {}, {
      anchor: anchor
    }));

    var getArrow = function getArrow() {
      if (!state) return null;
      if (!state.open) return /*#__PURE__*/React.createElement(MenuRounded, SvgIconProps);
      if (theme.direction === 'rtl' && anchor === 'left') return /*#__PURE__*/React.createElement(ArrowRight, SvgIconProps);
      if (theme.direction === 'rtl' && anchor === 'right') return /*#__PURE__*/React.createElement(ArrowLeft, SvgIconProps);
      if (anchor === 'left') return /*#__PURE__*/React.createElement(ArrowLeft, SvgIconProps);
      if (anchor === 'right') return /*#__PURE__*/React.createElement(ArrowRight, SvgIconProps);
      return null;
    };

    return /*#__PURE__*/React.createElement(StyledIconBtn, _extends({}, props, {
      styles: hiddenStyles,
      classes: classes,
      onClick: function onClick(e) {
        if (typeof _onClick === 'function') _onClick(e);
        setOpen(id, !state.open);
      }
    }), typeof children === 'function' ? children(_extends({
      anchor: anchor
    }, state)) : getArrow());
  };

  return SidebarTrigger;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1NpZGViYXJUcmlnZ2VyL1NpZGViYXJUcmlnZ2VyLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIm1ha2VTdHlsZXMiLCJ1c2VUaGVtZSIsIkljb25CdXR0b24iLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0IiwiTWVudVJvdW5kZWQiLCJ1c2VTaWRlYmFyVHJpZ2dlciIsImdlbmVyYXRlU3R5bGVkUHJveHlDcmVhdG9yIiwic3R5bGVkIiwic3R5bGVkUHJveHkiLCJTdHlsZWRJY29uQnRuIiwidXNlU3R5bGVzIiwic3BhY2luZyIsImRpcmVjdGlvbiIsInJvb3QiLCJhbmNob3IiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJuYW1lIiwiU2lkZWJhclRyaWdnZXIiLCJjaGlsZHJlbiIsInNpZGViYXJJZCIsIm9uQ2xpY2siLCJTdmdJY29uUHJvcHMiLCJwcm9wcyIsImlkIiwiaGlkZGVuU3R5bGVzIiwic3RhdGUiLCJzZXRPcGVuIiwidGhlbWUiLCJjbGFzc2VzIiwiZ2V0QXJyb3ciLCJvcGVuIiwiZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLFNBQVNDLFVBQVQsRUFBcUJDLFFBQXJCLFFBQXFDLDBCQUFyQztBQUNBLE9BQU9DLFVBQVAsTUFBNEMsOEJBQTVDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQiw2Q0FBdEI7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLDhDQUF2QjtBQUNBLE9BQU9DLFdBQVAsTUFBd0IsZ0NBQXhCO0FBQ0EsU0FBU0MsaUJBQVQsUUFBa0MsYUFBbEM7QUFFQSxTQUFTQywwQkFBVCxRQUEyQyx1QkFBM0M7QUFFQSxnQkFBZSxVQUFDQyxNQUFELEVBQWlCO0FBQzlCLE1BQU1DLFdBQVcsR0FBR0YsMEJBQTBCLENBQUNDLE1BQUQsQ0FBOUM7QUFDQSxNQUFNRSxhQUFhLEdBQUdELFdBQVcsQ0FBa0JQLFVBQWxCLENBQWpDO0FBRUEsTUFBTVMsU0FBUyxHQUFHWCxVQUFVLENBQzFCO0FBQUEsUUFBR1ksT0FBSCxRQUFHQSxPQUFIO0FBQUEsUUFBWUMsU0FBWixRQUFZQSxTQUFaO0FBQUEsV0FBNkI7QUFDM0I7QUFDQUMsTUFBQUEsSUFBSSxFQUFFO0FBQUEsWUFBR0MsTUFBSCxTQUFHQSxNQUFIO0FBQUEscUNBQ0FBLE1BQU0sS0FBSyxNQUFYLElBQXFCO0FBQ3ZCQyxVQUFBQSxVQUFVLEVBQUVKLE9BQU8sQ0FBQ0MsU0FBUyxLQUFLLEtBQWQsR0FBc0IsQ0FBdEIsR0FBMEIsQ0FBQyxDQUE1QixDQURJO0FBRXZCSSxVQUFBQSxXQUFXLEVBQUVMLE9BQU8sQ0FBQ0MsU0FBUyxLQUFLLEtBQWQsR0FBc0IsQ0FBQyxDQUF2QixHQUEyQixDQUE1QjtBQUZHLFNBRHJCLEdBS0FFLE1BQU0sS0FBSyxPQUFYLElBQXNCO0FBQ3hCQyxVQUFBQSxVQUFVLEVBQUVKLE9BQU8sQ0FBQ0MsU0FBUyxLQUFLLEtBQWQsR0FBc0IsQ0FBQyxDQUF2QixHQUEyQixDQUE1QixDQURLO0FBRXhCSSxVQUFBQSxXQUFXLEVBQUVMLE9BQU8sQ0FBQ0MsU0FBUyxLQUFLLEtBQWQsR0FBc0IsQ0FBdEIsR0FBMEIsQ0FBQyxDQUE1QjtBQUZJLFNBTHRCO0FBQUE7QUFGcUIsS0FBN0I7QUFBQSxHQUQwQixFQWMxQjtBQUFFSyxJQUFBQSxJQUFJLEVBQUU7QUFBUixHQWQwQixDQUE1Qjs7QUFpQkEsTUFBTUMsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixRQU1XO0FBQUEsUUFMaENDLFFBS2dDLFNBTGhDQSxRQUtnQztBQUFBLFFBSmhDQyxTQUlnQyxTQUpoQ0EsU0FJZ0M7QUFBQSxRQUhoQ0MsUUFHZ0MsU0FIaENBLE9BR2dDO0FBQUEsUUFGaENDLFlBRWdDLFNBRmhDQSxZQUVnQztBQUFBLFFBRDdCQyxLQUM2Qjs7QUFBQSw2QkFDcUJsQixpQkFBaUIsQ0FDcEVlLFNBRG9FLEVBRXBFLGdCQUZvRSxDQUR0QztBQUFBLFFBQ3hCSSxFQUR3QixzQkFDeEJBLEVBRHdCO0FBQUEsUUFDcEJWLE1BRG9CLHNCQUNwQkEsTUFEb0I7QUFBQSxRQUNaVyxZQURZLHNCQUNaQSxZQURZO0FBQUEsUUFDRUMsS0FERixzQkFDRUEsS0FERjtBQUFBLFFBQ1NDLE9BRFQsc0JBQ1NBLE9BRFQ7O0FBS2hDLFFBQU1DLEtBQUssR0FBRzVCLFFBQVEsRUFBdEI7QUFDQSxRQUFNNkIsT0FBTyxHQUFHbkIsU0FBUyx1QkFBTWEsS0FBTjtBQUFhVCxNQUFBQSxNQUFNLEVBQU5BO0FBQWIsT0FBekI7O0FBQ0EsUUFBTWdCLFFBQVEsR0FBRyxTQUFYQSxRQUFXLEdBQU07QUFDckIsVUFBSSxDQUFDSixLQUFMLEVBQVksT0FBTyxJQUFQO0FBQ1osVUFBSSxDQUFDQSxLQUFLLENBQUNLLElBQVgsRUFBaUIsb0JBQU8sb0JBQUMsV0FBRCxFQUFpQlQsWUFBakIsQ0FBUDtBQUNqQixVQUFJTSxLQUFLLENBQUNoQixTQUFOLEtBQW9CLEtBQXBCLElBQTZCRSxNQUFNLEtBQUssTUFBNUMsRUFBb0Qsb0JBQU8sb0JBQUMsVUFBRCxFQUFnQlEsWUFBaEIsQ0FBUDtBQUNwRCxVQUFJTSxLQUFLLENBQUNoQixTQUFOLEtBQW9CLEtBQXBCLElBQTZCRSxNQUFNLEtBQUssT0FBNUMsRUFBcUQsb0JBQU8sb0JBQUMsU0FBRCxFQUFlUSxZQUFmLENBQVA7QUFDckQsVUFBSVIsTUFBTSxLQUFLLE1BQWYsRUFBdUIsb0JBQU8sb0JBQUMsU0FBRCxFQUFlUSxZQUFmLENBQVA7QUFDdkIsVUFBSVIsTUFBTSxLQUFLLE9BQWYsRUFBd0Isb0JBQU8sb0JBQUMsVUFBRCxFQUFnQlEsWUFBaEIsQ0FBUDtBQUN4QixhQUFPLElBQVA7QUFDRCxLQVJEOztBQVNBLHdCQUNFLG9CQUFDLGFBQUQsZUFDTUMsS0FETjtBQUVFLE1BQUEsTUFBTSxFQUFFRSxZQUZWO0FBR0UsTUFBQSxPQUFPLEVBQUVJLE9BSFg7QUFJRSxNQUFBLE9BQU8sRUFBRSxpQkFBQ0csQ0FBRCxFQUE0QztBQUNuRCxZQUFJLE9BQU9YLFFBQVAsS0FBbUIsVUFBdkIsRUFBbUNBLFFBQU8sQ0FBQ1csQ0FBRCxDQUFQO0FBQ25DTCxRQUFBQSxPQUFPLENBQUNILEVBQUQsRUFBSyxDQUFDRSxLQUFLLENBQUNLLElBQVosQ0FBUDtBQUNEO0FBUEgsUUFTRyxPQUFPWixRQUFQLEtBQW9CLFVBQXBCLEdBQ0dBLFFBQVE7QUFBR0wsTUFBQUEsTUFBTSxFQUFOQTtBQUFILE9BQWNZLEtBQWQsRUFEWCxHQUVHSSxRQUFRLEVBWGQsQ0FERjtBQWVELEdBckNEOztBQXNDQSxTQUFPWixjQUFQO0FBQ0QsQ0E1REQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcywgdXNlVGhlbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IEljb25CdXR0b24sIHsgSWNvbkJ1dHRvblByb3BzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvSWNvbkJ1dHRvbic7XG5pbXBvcnQgQXJyb3dMZWZ0IGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9LZXlib2FyZEFycm93TGVmdFJvdW5kZWQnO1xuaW1wb3J0IEFycm93UmlnaHQgZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0tleWJvYXJkQXJyb3dSaWdodFJvdW5kZWQnO1xuaW1wb3J0IE1lbnVSb3VuZGVkIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9NZW51Um91bmRlZCc7XG5pbXBvcnQgeyB1c2VTaWRlYmFyVHJpZ2dlciB9IGZyb20gJy4uLy4uL2hvb2tzJztcbmltcG9ydCB7IEN0YVByb3BzIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVTdHlsZWRQcm94eUNyZWF0b3IgfSBmcm9tICcuLi9TaGFyZWQvU3R5bGVkUHJveHknO1xuXG5leHBvcnQgZGVmYXVsdCAoc3R5bGVkOiBhbnkpID0+IHtcbiAgY29uc3Qgc3R5bGVkUHJveHkgPSBnZW5lcmF0ZVN0eWxlZFByb3h5Q3JlYXRvcihzdHlsZWQpO1xuICBjb25zdCBTdHlsZWRJY29uQnRuID0gc3R5bGVkUHJveHk8SWNvbkJ1dHRvblByb3BzPihJY29uQnV0dG9uKTtcblxuICBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAgICh7IHNwYWNpbmcsIGRpcmVjdGlvbiB9KSA9PiAoe1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcm9vdDogKHsgYW5jaG9yIH0pID0+ICh7XG4gICAgICAgIC4uLihhbmNob3IgPT09ICdsZWZ0JyAmJiB7XG4gICAgICAgICAgbWFyZ2luTGVmdDogc3BhY2luZyhkaXJlY3Rpb24gPT09ICdydGwnID8gMSA6IC0xKSxcbiAgICAgICAgICBtYXJnaW5SaWdodDogc3BhY2luZyhkaXJlY3Rpb24gPT09ICdydGwnID8gLTEgOiAxKSxcbiAgICAgICAgfSksXG4gICAgICAgIC4uLihhbmNob3IgPT09ICdyaWdodCcgJiYge1xuICAgICAgICAgIG1hcmdpbkxlZnQ6IHNwYWNpbmcoZGlyZWN0aW9uID09PSAncnRsJyA/IC0xIDogMSksXG4gICAgICAgICAgbWFyZ2luUmlnaHQ6IHNwYWNpbmcoZGlyZWN0aW9uID09PSAncnRsJyA/IDEgOiAtMSksXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgfSksXG4gICAgeyBuYW1lOiAnU2lkZWJhclRyaWdnZXInIH1cbiAgKTtcblxuICBjb25zdCBTaWRlYmFyVHJpZ2dlciA9ICh7XG4gICAgY2hpbGRyZW4sXG4gICAgc2lkZWJhcklkLFxuICAgIG9uQ2xpY2ssXG4gICAgU3ZnSWNvblByb3BzLFxuICAgIC4uLnByb3BzXG4gIH06IEljb25CdXR0b25Qcm9wcyAmIEN0YVByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBpZCwgYW5jaG9yLCBoaWRkZW5TdHlsZXMsIHN0YXRlLCBzZXRPcGVuIH0gPSB1c2VTaWRlYmFyVHJpZ2dlcihcbiAgICAgIHNpZGViYXJJZCxcbiAgICAgICdTaWRlYmFyVHJpZ2dlcidcbiAgICApO1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKVxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoeyAuLi5wcm9wcywgYW5jaG9yIH0pO1xuICAgIGNvbnN0IGdldEFycm93ID0gKCkgPT4ge1xuICAgICAgaWYgKCFzdGF0ZSkgcmV0dXJuIG51bGw7XG4gICAgICBpZiAoIXN0YXRlLm9wZW4pIHJldHVybiA8TWVudVJvdW5kZWQgey4uLlN2Z0ljb25Qcm9wc30gLz47XG4gICAgICBpZiAodGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyAmJiBhbmNob3IgPT09ICdsZWZ0JykgcmV0dXJuIDxBcnJvd1JpZ2h0IHsuLi5TdmdJY29uUHJvcHN9IC8+O1xuICAgICAgaWYgKHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgJiYgYW5jaG9yID09PSAncmlnaHQnKSByZXR1cm4gPEFycm93TGVmdCB7Li4uU3ZnSWNvblByb3BzfSAvPjtcbiAgICAgIGlmIChhbmNob3IgPT09ICdsZWZ0JykgcmV0dXJuIDxBcnJvd0xlZnQgey4uLlN2Z0ljb25Qcm9wc30gLz47XG4gICAgICBpZiAoYW5jaG9yID09PSAncmlnaHQnKSByZXR1cm4gPEFycm93UmlnaHQgey4uLlN2Z0ljb25Qcm9wc30gLz47XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICA8U3R5bGVkSWNvbkJ0blxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIHN0eWxlcz17aGlkZGVuU3R5bGVzfVxuICAgICAgICBjbGFzc2VzPXtjbGFzc2VzfVxuICAgICAgICBvbkNsaWNrPXsoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4pID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIG9uQ2xpY2soZSk7XG4gICAgICAgICAgc2V0T3BlbihpZCwgIXN0YXRlLm9wZW4pO1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7dHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgPyBjaGlsZHJlbih7IGFuY2hvciwgLi4uc3RhdGUgfSlcbiAgICAgICAgICA6IGdldEFycm93KCl9XG4gICAgICA8L1N0eWxlZEljb25CdG4+XG4gICAgKTtcbiAgfTtcbiAgcmV0dXJuIFNpZGViYXJUcmlnZ2VyO1xufTtcbiJdfQ==