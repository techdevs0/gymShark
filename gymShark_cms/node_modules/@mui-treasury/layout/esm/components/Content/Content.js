function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { useTheme } from '@material-ui/core/styles';
import { useLayoutCtx } from '../../contexts';
import { createBreakpointStyles, CSS_TRANSITION } from '../../utils';
import ContentCompiler from '../../compilers/ContentCompiler';
import { useFullscreenCtx } from '../../contexts/FullscreenContext';
import { generateStyledProxyCreator } from '../Shared/StyledProxy';
export default (function (styled) {
  var styledProxy = generateStyledProxyCreator(styled);
  var Main = styledProxy('main');

  var Content = function Content(_ref) {
    var children = _ref.children,
        props = _objectWithoutProperties(_ref, ["children"]);

    var theme = useTheme();

    var _useLayoutCtx = useLayoutCtx(),
        data = _useLayoutCtx.data,
        state = _useLayoutCtx.state;

    var styles = createBreakpointStyles(ContentCompiler(state, data.edgeSidebar).getResultStyle(data.content.id), theme);
    var isFullscreen = useFullscreenCtx();
    return /*#__PURE__*/React.createElement(Main, _extends({}, props, {
      styles: _extends(_extends({
        transition: CSS_TRANSITION
      }, styles), isFullscreen && {
        flexGrow: 1,
        minHeight: 0,
        display: 'flex'
      })
    }), children);
  };

  return Content;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbnRlbnQvQ29udGVudC50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VUaGVtZSIsInVzZUxheW91dEN0eCIsImNyZWF0ZUJyZWFrcG9pbnRTdHlsZXMiLCJDU1NfVFJBTlNJVElPTiIsIkNvbnRlbnRDb21waWxlciIsInVzZUZ1bGxzY3JlZW5DdHgiLCJnZW5lcmF0ZVN0eWxlZFByb3h5Q3JlYXRvciIsInN0eWxlZCIsInN0eWxlZFByb3h5IiwiTWFpbiIsIkNvbnRlbnQiLCJjaGlsZHJlbiIsInByb3BzIiwidGhlbWUiLCJkYXRhIiwic3RhdGUiLCJzdHlsZXMiLCJlZGdlU2lkZWJhciIsImdldFJlc3VsdFN0eWxlIiwiY29udGVudCIsImlkIiwiaXNGdWxsc2NyZWVuIiwidHJhbnNpdGlvbiIsImZsZXhHcm93IiwibWluSGVpZ2h0IiwiZGlzcGxheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLFNBQVNDLFFBQVQsUUFBeUIsMEJBQXpCO0FBQ0EsU0FBU0MsWUFBVCxRQUE2QixnQkFBN0I7QUFDQSxTQUFTQyxzQkFBVCxFQUFpQ0MsY0FBakMsUUFBdUQsYUFBdkQ7QUFDQSxPQUFPQyxlQUFQLE1BQTRCLGlDQUE1QjtBQUNBLFNBQVNDLGdCQUFULFFBQWlDLGtDQUFqQztBQUNBLFNBQVNDLDBCQUFULFFBQTJDLHVCQUEzQztBQUVBLGdCQUFlLFVBQUNDLE1BQUQsRUFBaUI7QUFDOUIsTUFBTUMsV0FBVyxHQUFHRiwwQkFBMEIsQ0FBQ0MsTUFBRCxDQUE5QztBQUNBLE1BQU1FLElBQUksR0FBR0QsV0FBVyxDQUFDLE1BQUQsQ0FBeEI7O0FBRUEsTUFBTUUsT0FBTyxHQUFHLFNBQVZBLE9BQVUsT0FHdUM7QUFBQSxRQUZyREMsUUFFcUQsUUFGckRBLFFBRXFEO0FBQUEsUUFEbERDLEtBQ2tEOztBQUNyRCxRQUFNQyxLQUFLLEdBQUdiLFFBQVEsRUFBdEI7O0FBRHFELHdCQUU3QkMsWUFBWSxFQUZpQjtBQUFBLFFBRTdDYSxJQUY2QyxpQkFFN0NBLElBRjZDO0FBQUEsUUFFdkNDLEtBRnVDLGlCQUV2Q0EsS0FGdUM7O0FBR3JELFFBQU1DLE1BQU0sR0FBR2Qsc0JBQXNCLENBQ25DRSxlQUFlLENBQUNXLEtBQUQsRUFBUUQsSUFBSSxDQUFDRyxXQUFiLENBQWYsQ0FBeUNDLGNBQXpDLENBQXdESixJQUFJLENBQUNLLE9BQUwsQ0FBYUMsRUFBckUsQ0FEbUMsRUFFbkNQLEtBRm1DLENBQXJDO0FBSUEsUUFBTVEsWUFBWSxHQUFHaEIsZ0JBQWdCLEVBQXJDO0FBQ0Esd0JBQ0Usb0JBQUMsSUFBRCxlQUNNTyxLQUROO0FBRUUsTUFBQSxNQUFNO0FBQ0pVLFFBQUFBLFVBQVUsRUFBRW5CO0FBRFIsU0FFRGEsTUFGQyxHQUdBSyxZQUFZLElBQUk7QUFBRUUsUUFBQUEsUUFBUSxFQUFFLENBQVo7QUFBZUMsUUFBQUEsU0FBUyxFQUFFLENBQTFCO0FBQTZCQyxRQUFBQSxPQUFPLEVBQUU7QUFBdEMsT0FIaEI7QUFGUixRQVFHZCxRQVJILENBREY7QUFZRCxHQXZCRDs7QUF3QkEsU0FBT0QsT0FBUDtBQUNELENBN0JEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcbmltcG9ydCB7IHVzZUxheW91dEN0eCB9IGZyb20gJy4uLy4uL2NvbnRleHRzJztcbmltcG9ydCB7IGNyZWF0ZUJyZWFrcG9pbnRTdHlsZXMsIENTU19UUkFOU0lUSU9OIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IENvbnRlbnRDb21waWxlciBmcm9tICcuLi8uLi9jb21waWxlcnMvQ29udGVudENvbXBpbGVyJztcbmltcG9ydCB7IHVzZUZ1bGxzY3JlZW5DdHggfSBmcm9tICcuLi8uLi9jb250ZXh0cy9GdWxsc2NyZWVuQ29udGV4dCc7XG5pbXBvcnQgeyBnZW5lcmF0ZVN0eWxlZFByb3h5Q3JlYXRvciB9IGZyb20gJy4uL1NoYXJlZC9TdHlsZWRQcm94eSc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdHlsZWQ6IGFueSkgPT4ge1xuICBjb25zdCBzdHlsZWRQcm94eSA9IGdlbmVyYXRlU3R5bGVkUHJveHlDcmVhdG9yKHN0eWxlZCk7XG4gIGNvbnN0IE1haW4gPSBzdHlsZWRQcm94eSgnbWFpbicpO1xuXG4gIGNvbnN0IENvbnRlbnQgPSAoe1xuICAgIGNoaWxkcmVuLFxuICAgIC4uLnByb3BzXG4gIH06IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPHsgY2xhc3NOYW1lPzogc3RyaW5nIH0+KSA9PiB7XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICAgIGNvbnN0IHsgZGF0YSwgc3RhdGUgfSA9IHVzZUxheW91dEN0eCgpO1xuICAgIGNvbnN0IHN0eWxlcyA9IGNyZWF0ZUJyZWFrcG9pbnRTdHlsZXMoXG4gICAgICBDb250ZW50Q29tcGlsZXIoc3RhdGUsIGRhdGEuZWRnZVNpZGViYXIpLmdldFJlc3VsdFN0eWxlKGRhdGEuY29udGVudC5pZCksXG4gICAgICB0aGVtZVxuICAgICk7XG4gICAgY29uc3QgaXNGdWxsc2NyZWVuID0gdXNlRnVsbHNjcmVlbkN0eCgpO1xuICAgIHJldHVybiAoXG4gICAgICA8TWFpblxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIHN0eWxlcz17e1xuICAgICAgICAgIHRyYW5zaXRpb246IENTU19UUkFOU0lUSU9OLFxuICAgICAgICAgIC4uLnN0eWxlcyxcbiAgICAgICAgICAuLi4oaXNGdWxsc2NyZWVuICYmIHsgZmxleEdyb3c6IDEsIG1pbkhlaWdodDogMCwgZGlzcGxheTogJ2ZsZXgnIH0pLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L01haW4+XG4gICAgKTtcbiAgfTtcbiAgcmV0dXJuIENvbnRlbnQ7XG59O1xuIl19