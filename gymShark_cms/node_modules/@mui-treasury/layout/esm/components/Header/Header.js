function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import AppBar from '@material-ui/core/AppBar';
import { useTheme } from '@material-ui/core/styles';
import getHeaderOffset from '../HeaderOffset';
import { useLayoutCtx } from '../../contexts';
import { generateStyledProxyCreator } from '../Shared/StyledProxy';
import HeaderCompiler from '../../compilers/HeaderCompiler';
import { createBreakpointStyles, CSS_TRANSITION } from '../../utils';
export default (function (styled) {
  var styledProxy = generateStyledProxyCreator(styled);
  var StyledAppBar = styledProxy(AppBar);
  var HeaderOffset = getHeaderOffset(styled);

  var Header = function Header(props) {
    var _useLayoutCtx = useLayoutCtx(),
        data = _useLayoutCtx.data,
        state = _useLayoutCtx.state;

    var theme = useTheme();
    var styles = createBreakpointStyles(HeaderCompiler(state, data.header, data.edgeSidebar).getResultStyle(), theme);
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledAppBar, _extends({
      color: 'default',
      elevation: 0,
      "mui-layout": data.headerId
    }, props, {
      styles: _extends({
        transition: CSS_TRANSITION
      }, styles)
    })), /*#__PURE__*/React.createElement(HeaderOffset, null));
  };

  return Header;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0hlYWRlci9IZWFkZXIudHN4Il0sIm5hbWVzIjpbIlJlYWN0IiwiQXBwQmFyIiwidXNlVGhlbWUiLCJnZXRIZWFkZXJPZmZzZXQiLCJ1c2VMYXlvdXRDdHgiLCJnZW5lcmF0ZVN0eWxlZFByb3h5Q3JlYXRvciIsIkhlYWRlckNvbXBpbGVyIiwiY3JlYXRlQnJlYWtwb2ludFN0eWxlcyIsIkNTU19UUkFOU0lUSU9OIiwic3R5bGVkIiwic3R5bGVkUHJveHkiLCJTdHlsZWRBcHBCYXIiLCJIZWFkZXJPZmZzZXQiLCJIZWFkZXIiLCJwcm9wcyIsImRhdGEiLCJzdGF0ZSIsInRoZW1lIiwic3R5bGVzIiwiaGVhZGVyIiwiZWRnZVNpZGViYXIiLCJnZXRSZXN1bHRTdHlsZSIsImhlYWRlcklkIiwidHJhbnNpdGlvbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsTUFBUCxNQUFvQywwQkFBcEM7QUFDQSxTQUFnQkMsUUFBaEIsUUFBZ0MsMEJBQWhDO0FBQ0EsT0FBT0MsZUFBUCxNQUE0QixpQkFBNUI7QUFDQSxTQUFTQyxZQUFULFFBQTZCLGdCQUE3QjtBQUNBLFNBQVNDLDBCQUFULFFBQTJDLHVCQUEzQztBQUNBLE9BQU9DLGNBQVAsTUFBMkIsZ0NBQTNCO0FBQ0EsU0FBU0Msc0JBQVQsRUFBaUNDLGNBQWpDLFFBQXVELGFBQXZEO0FBRUEsZ0JBQWUsVUFBQ0MsTUFBRCxFQUFpQjtBQUM5QixNQUFNQyxXQUFXLEdBQUdMLDBCQUEwQixDQUFDSSxNQUFELENBQTlDO0FBQ0EsTUFBTUUsWUFBWSxHQUFHRCxXQUFXLENBQWNULE1BQWQsQ0FBaEM7QUFDQSxNQUFNVyxZQUFZLEdBQUdULGVBQWUsQ0FBQ00sTUFBRCxDQUFwQzs7QUFFQSxNQUFNSSxNQUE2QixHQUFHLFNBQWhDQSxNQUFnQyxDQUFBQyxLQUFLLEVBQUk7QUFBQSx3QkFDckJWLFlBQVksRUFEUztBQUFBLFFBQ3JDVyxJQURxQyxpQkFDckNBLElBRHFDO0FBQUEsUUFDL0JDLEtBRCtCLGlCQUMvQkEsS0FEK0I7O0FBRTdDLFFBQU1DLEtBQUssR0FBR2YsUUFBUSxFQUF0QjtBQUNBLFFBQU1nQixNQUFNLEdBQUdYLHNCQUFzQixDQUNuQ0QsY0FBYyxDQUFDVSxLQUFELEVBQVFELElBQUksQ0FBQ0ksTUFBYixFQUFxQkosSUFBSSxDQUFDSyxXQUExQixDQUFkLENBQXFEQyxjQUFyRCxFQURtQyxFQUVuQ0osS0FGbUMsQ0FBckM7QUFJQSx3QkFDRSx1REFDRSxvQkFBQyxZQUFEO0FBQ0UsTUFBQSxLQUFLLEVBQUUsU0FEVDtBQUVFLE1BQUEsU0FBUyxFQUFFLENBRmI7QUFHRSxvQkFBWUYsSUFBSSxDQUFDTztBQUhuQixPQUlNUixLQUpOO0FBS0UsTUFBQSxNQUFNO0FBQ0pTLFFBQUFBLFVBQVUsRUFBRWY7QUFEUixTQUVEVSxNQUZDO0FBTFIsT0FERixlQVdFLG9CQUFDLFlBQUQsT0FYRixDQURGO0FBZUQsR0F0QkQ7O0FBd0JBLFNBQU9MLE1BQVA7QUFDRCxDQTlCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQXBwQmFyLCB7IEFwcEJhclByb3BzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQXBwQmFyJztcbmltcG9ydCB7IFRoZW1lLCB1c2VUaGVtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5pbXBvcnQgZ2V0SGVhZGVyT2Zmc2V0IGZyb20gJy4uL0hlYWRlck9mZnNldCc7XG5pbXBvcnQgeyB1c2VMYXlvdXRDdHggfSBmcm9tICcuLi8uLi9jb250ZXh0cyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVN0eWxlZFByb3h5Q3JlYXRvciB9IGZyb20gJy4uL1NoYXJlZC9TdHlsZWRQcm94eSc7XG5pbXBvcnQgSGVhZGVyQ29tcGlsZXIgZnJvbSAnLi4vLi4vY29tcGlsZXJzL0hlYWRlckNvbXBpbGVyJztcbmltcG9ydCB7IGNyZWF0ZUJyZWFrcG9pbnRTdHlsZXMsIENTU19UUkFOU0lUSU9OIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3R5bGVkOiBhbnkpID0+IHtcbiAgY29uc3Qgc3R5bGVkUHJveHkgPSBnZW5lcmF0ZVN0eWxlZFByb3h5Q3JlYXRvcihzdHlsZWQpO1xuICBjb25zdCBTdHlsZWRBcHBCYXIgPSBzdHlsZWRQcm94eTxBcHBCYXJQcm9wcz4oQXBwQmFyKTtcbiAgY29uc3QgSGVhZGVyT2Zmc2V0ID0gZ2V0SGVhZGVyT2Zmc2V0KHN0eWxlZCk7XG5cbiAgY29uc3QgSGVhZGVyOiBSZWFjdC5GQzxBcHBCYXJQcm9wcz4gPSBwcm9wcyA9PiB7XG4gICAgY29uc3QgeyBkYXRhLCBzdGF0ZSB9ID0gdXNlTGF5b3V0Q3R4KCk7XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZTxUaGVtZT4oKTtcbiAgICBjb25zdCBzdHlsZXMgPSBjcmVhdGVCcmVha3BvaW50U3R5bGVzKFxuICAgICAgSGVhZGVyQ29tcGlsZXIoc3RhdGUsIGRhdGEuaGVhZGVyLCBkYXRhLmVkZ2VTaWRlYmFyKS5nZXRSZXN1bHRTdHlsZSgpLFxuICAgICAgdGhlbWVcbiAgICApO1xuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8U3R5bGVkQXBwQmFyXG4gICAgICAgICAgY29sb3I9eydkZWZhdWx0J31cbiAgICAgICAgICBlbGV2YXRpb249ezB9XG4gICAgICAgICAgbXVpLWxheW91dD17ZGF0YS5oZWFkZXJJZH1cbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgc3R5bGVzPXt7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBDU1NfVFJBTlNJVElPTixcbiAgICAgICAgICAgIC4uLnN0eWxlcyxcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgICA8SGVhZGVyT2Zmc2V0IC8+XG4gICAgICA8Lz5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBIZWFkZXI7XG59O1xuIl19