function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { makeStyles, useTheme } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import ArrowLeft from '@material-ui/icons/KeyboardArrowLeftRounded';
import ArrowRight from '@material-ui/icons/KeyboardArrowRightRounded';
import { generateStyledProxyCreator } from '../Shared/StyledProxy';
import { useSidebarCollapse } from '../../hooks';
import { switchDirection } from '../../utils/resolveDirection';
export default (function (styled) {
  var styledProxy = generateStyledProxyCreator(styled);
  var StyledButton = styledProxy(Button);
  var useStyles = makeStyles(function (_ref) {
    var palette = _ref.palette,
        breakpoints = _ref.breakpoints;
    return {
      root: _defineProperty({
        backgroundColor: palette.type === 'dark' ? palette.background.paper : palette.grey[50],
        textAlign: 'center',
        borderRadius: 0,
        borderTop: '1px solid',
        borderColor: palette.action.hover
      }, breakpoints.up('sm'), {
        minHeight: 40
      })
    };
  });

  var CollapseBtn = function CollapseBtn(_ref2) {
    var children = _ref2.children,
        sidebarId = _ref2.sidebarId,
        _onClick = _ref2.onClick,
        SvgIconProps = _ref2.SvgIconProps,
        props = _objectWithoutProperties(_ref2, ["children", "sidebarId", "onClick", "SvgIconProps"]);

    var classes = useStyles(props);

    var _useSidebarCollapse = useSidebarCollapse(sidebarId, 'CollapseBtn'),
        id = _useSidebarCollapse.id,
        anchor = _useSidebarCollapse.anchor,
        hiddenStyles = _useSidebarCollapse.hiddenStyles,
        state = _useSidebarCollapse.state,
        setCollapsed = _useSidebarCollapse.setCollapsed;

    var theme = useTheme();
    var arrowR = /*#__PURE__*/React.createElement(ArrowRight, SvgIconProps);
    var arrowL = /*#__PURE__*/React.createElement(ArrowLeft, SvgIconProps);

    var getArrow = function getArrow(direction) {
      if (direction === 'left') {
        return state.collapsed ? arrowR : arrowL;
      }

      if (direction === 'right') {
        return state.collapsed ? arrowL : arrowR;
      }

      return null;
    };

    return /*#__PURE__*/React.createElement(StyledButton, _extends({}, props, {
      classes: classes,
      styles: hiddenStyles,
      onClick: function onClick(e) {
        if (typeof _onClick === 'function') _onClick(e);
        setCollapsed(id, !state.collapsed);
      }
    }), typeof children === 'function' ? children(_extends({
      anchor: anchor
    }, state)) : getArrow(theme.direction === 'rtl' ? switchDirection(anchor) : anchor));
  };

  return CollapseBtn;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxhcHNlQnRuL0NvbGxhcHNlQnRuLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIm1ha2VTdHlsZXMiLCJ1c2VUaGVtZSIsIkJ1dHRvbiIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJnZW5lcmF0ZVN0eWxlZFByb3h5Q3JlYXRvciIsInVzZVNpZGViYXJDb2xsYXBzZSIsInN3aXRjaERpcmVjdGlvbiIsInN0eWxlZCIsInN0eWxlZFByb3h5IiwiU3R5bGVkQnV0dG9uIiwidXNlU3R5bGVzIiwicGFsZXR0ZSIsImJyZWFrcG9pbnRzIiwicm9vdCIsImJhY2tncm91bmRDb2xvciIsInR5cGUiLCJiYWNrZ3JvdW5kIiwicGFwZXIiLCJncmV5IiwidGV4dEFsaWduIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyVG9wIiwiYm9yZGVyQ29sb3IiLCJhY3Rpb24iLCJob3ZlciIsInVwIiwibWluSGVpZ2h0IiwiQ29sbGFwc2VCdG4iLCJjaGlsZHJlbiIsInNpZGViYXJJZCIsIm9uQ2xpY2siLCJTdmdJY29uUHJvcHMiLCJwcm9wcyIsImNsYXNzZXMiLCJpZCIsImFuY2hvciIsImhpZGRlblN0eWxlcyIsInN0YXRlIiwic2V0Q29sbGFwc2VkIiwidGhlbWUiLCJhcnJvd1IiLCJhcnJvd0wiLCJnZXRBcnJvdyIsImRpcmVjdGlvbiIsImNvbGxhcHNlZCIsImUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLFNBQVNDLFVBQVQsRUFBcUJDLFFBQXJCLFFBQXFDLDBCQUFyQztBQUNBLE9BQU9DLE1BQVAsTUFBb0MsMEJBQXBDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQiw2Q0FBdEI7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLDhDQUF2QjtBQUNBLFNBQVNDLDBCQUFULFFBQTJDLHVCQUEzQztBQUVBLFNBQVNDLGtCQUFULFFBQW1DLGFBQW5DO0FBQ0EsU0FBU0MsZUFBVCxRQUFn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LEtBQUssQ0FBQ0ksU0FBTixLQUFvQixLQUFwQixHQUNLckMsZUFBZSxDQUFDNkIsTUFBRCxDQURwQixHQUVJQSxNQUhFLENBWGQsQ0FERjtBQW1CRCxHQTlDRDs7QUErQ0EsU0FBT1IsV0FBUDtBQUNELENBbEVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1ha2VTdHlsZXMsIHVzZVRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcbmltcG9ydCBCdXR0b24sIHsgQnV0dG9uUHJvcHMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24nO1xuaW1wb3J0IEFycm93TGVmdCBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvS2V5Ym9hcmRBcnJvd0xlZnRSb3VuZGVkJztcbmltcG9ydCBBcnJvd1JpZ2h0IGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9LZXlib2FyZEFycm93UmlnaHRSb3VuZGVkJztcbmltcG9ydCB7IGdlbmVyYXRlU3R5bGVkUHJveHlDcmVhdG9yIH0gZnJvbSAnLi4vU2hhcmVkL1N0eWxlZFByb3h5JztcbmltcG9ydCB7IEN0YVByb3BzLCBEcmF3ZXJBbmNob3IgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyB1c2VTaWRlYmFyQ29sbGFwc2UgfSBmcm9tICcuLi8uLi9ob29rcyc7XG5pbXBvcnQgeyBzd2l0Y2hEaXJlY3Rpb24gfSBmcm9tICcuLi8uLi91dGlscy9yZXNvbHZlRGlyZWN0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0eWxlZDogYW55KSA9PiB7XG4gIGNvbnN0IHN0eWxlZFByb3h5ID0gZ2VuZXJhdGVTdHlsZWRQcm94eUNyZWF0b3Ioc3R5bGVkKTtcbiAgY29uc3QgU3R5bGVkQnV0dG9uID0gc3R5bGVkUHJveHk8QnV0dG9uUHJvcHM+KEJ1dHRvbik7XG5cbiAgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygoeyBwYWxldHRlLCBicmVha3BvaW50cyB9KSA9PiAoe1xuICAgIHJvb3Q6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjpcbiAgICAgICAgcGFsZXR0ZS50eXBlID09PSAnZGFyaycgPyBwYWxldHRlLmJhY2tncm91bmQucGFwZXIgOiBwYWxldHRlLmdyZXlbNTBdLFxuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgIGJvcmRlclRvcDogJzFweCBzb2xpZCcsXG4gICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS5hY3Rpb24uaG92ZXIsXG4gICAgICBbYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgICAgIG1pbkhlaWdodDogNDAsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pKTtcblxuICBjb25zdCBDb2xsYXBzZUJ0biA9ICh7XG4gICAgY2hpbGRyZW4sXG4gICAgc2lkZWJhcklkLFxuICAgIG9uQ2xpY2ssXG4gICAgU3ZnSWNvblByb3BzLFxuICAgIC4uLnByb3BzXG4gIH06IEJ1dHRvblByb3BzICYgQ3RhUHJvcHMpID0+IHtcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBpZCxcbiAgICAgIGFuY2hvcixcbiAgICAgIGhpZGRlblN0eWxlcyxcbiAgICAgIHN0YXRlLFxuICAgICAgc2V0Q29sbGFwc2VkLFxuICAgIH0gPSB1c2VTaWRlYmFyQ29sbGFwc2Uoc2lkZWJhcklkLCAnQ29sbGFwc2VCdG4nKTtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgYXJyb3dSID0gPEFycm93UmlnaHQgey4uLlN2Z0ljb25Qcm9wc30gLz47XG4gICAgY29uc3QgYXJyb3dMID0gPEFycm93TGVmdCB7Li4uU3ZnSWNvblByb3BzfSAvPjtcbiAgICBjb25zdCBnZXRBcnJvdyA9IChkaXJlY3Rpb246ICdsZWZ0JyB8ICdyaWdodCcpID0+IHtcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICByZXR1cm4gc3RhdGUuY29sbGFwc2VkID8gYXJyb3dSIDogYXJyb3dMO1xuICAgICAgfVxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICByZXR1cm4gc3RhdGUuY29sbGFwc2VkID8gYXJyb3dMIDogYXJyb3dSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgPFN0eWxlZEJ1dHRvblxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIGNsYXNzZXM9e2NsYXNzZXN9XG4gICAgICAgIHN0eWxlcz17aGlkZGVuU3R5bGVzfVxuICAgICAgICBvbkNsaWNrPXsoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4pID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIG9uQ2xpY2soZSk7XG4gICAgICAgICAgc2V0Q29sbGFwc2VkKGlkLCAhc3RhdGUuY29sbGFwc2VkKTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge3R5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgID8gY2hpbGRyZW4oeyBhbmNob3IsIC4uLnN0YXRlIH0pXG4gICAgICAgICAgOiBnZXRBcnJvdyhcbiAgICAgICAgICAgICAgdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJ1xuICAgICAgICAgICAgICAgID8gKHN3aXRjaERpcmVjdGlvbihhbmNob3IpIGFzIERyYXdlckFuY2hvcilcbiAgICAgICAgICAgICAgICA6IGFuY2hvclxuICAgICAgICAgICAgKX1cbiAgICAgIDwvU3R5bGVkQnV0dG9uPlxuICAgICk7XG4gIH07XG4gIHJldHVybiBDb2xsYXBzZUJ0bjtcbn07XG4iXX0=