function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import cx from 'clsx';
import { makeStyles, useTheme } from '@material-ui/core/styles';
import SwipeableDrawer from '@material-ui/core/SwipeableDrawer';
import { SidebarProvider, SidebarConsumer, useWindowCtx } from '../../contexts';
import { useBreakpointConfig, useSidebarAutoCollapse, useSidebar } from '../../hooks';
import getEdgeHeaderOffset from '../EdgeHeaderOffset';
import { CLS, createSwipeableVariant } from '../Shared/SharedSidebar';
import { get, createBreakpointStyles, createHiddenStyles } from '../../utils';
import { transitionStyles } from '../../styles';
import { generateStyledProxyCreator } from '../Shared/StyledProxy';
export default (function (styled) {
  var styledProxy = generateStyledProxyCreator(styled);
  var StyledSwipeableDrawer = styledProxy(SwipeableDrawer, CLS);
  var EdgeHeaderOffset = getEdgeHeaderOffset(styled);
  var TemporarySwipeableDrawer = createSwipeableVariant('temporary', StyledSwipeableDrawer);
  var PermanentSwipeableDrawer = createSwipeableVariant('permanent', StyledSwipeableDrawer);
  var PersistentSwipeableDrawer = createSwipeableVariant('persistent', StyledSwipeableDrawer);
  var useTransitionStyles = makeStyles(transitionStyles);

  var SwipeableSidebar = function SwipeableSidebar(_ref) {
    var onClose = _ref.onClose,
        onOpen = _ref.onOpen,
        children = _ref.children,
        PaperProps = _ref.PaperProps,
        ModalProps = _ref.ModalProps,
        SlideProps = _ref.SlideProps,
        props = _objectWithoutProperties(_ref, ["onClose", "onOpen", "children", "PaperProps", "ModalProps", "SlideProps"]);

    var sidebarId = props.sidebarId;
    useSidebarAutoCollapse(sidebarId);

    var _useWindowCtx = useWindowCtx(),
        iDocument = _useWindowCtx.iDocument;

    var transition = useTransitionStyles();
    var theme = useTheme();
    var breakpoints = theme.breakpoints;

    var _useSidebar = useSidebar(sidebarId, 'SwipeableDrawer'),
        anchor = _useSidebar.anchor,
        edgeSidebar = _useSidebar.edgeSidebar,
        _useSidebar$styles = _useSidebar.styles,
        permanent = _useSidebar$styles.permanent,
        persistent = _useSidebar$styles.persistent,
        temporary = _useSidebar$styles.temporary,
        state = _useSidebar.state,
        setOpen = _useSidebar.setOpen;

    var wrappedOnOpen = function wrappedOnOpen() {
      if (typeof onOpen === 'function') onOpen.apply(void 0, arguments);
      setOpen(sidebarId, true);
    };

    var wrappedOnClose = function wrappedOnClose() {
      if (typeof onOpen === 'function') onClose.apply(void 0, arguments);
      setOpen(sidebarId, false);
    };

    var config = useBreakpointConfig(edgeSidebar.configMapById[sidebarId]);
    var headerAdjustment = /*#__PURE__*/React.createElement(EdgeHeaderOffset, {
      sidebarId: sidebarId
    });
    return /*#__PURE__*/React.createElement(SidebarProvider, {
      id: sidebarId,
      config: config,
      sidebarState: state
    }, /*#__PURE__*/React.createElement(SidebarConsumer, null, function (_ref2) {
      var entered = _ref2.entered,
          inlineStyle = _ref2.inlineStyle,
          wrapOnEntered = _ref2.wrapOnEntered,
          wrapOnExit = _ref2.wrapOnExit,
          wrapOnMouseEnter = _ref2.wrapOnMouseEnter,
          wrapOnMouseLeave = _ref2.wrapOnMouseLeave;

      var commonProps = _extends(_extends({}, props), {}, {
        PaperProps: _extends(_extends({}, PaperProps), {}, {
          style: _extends(_extends({}, get(PaperProps, 'style')), inlineStyle),
          className: cx((entered || get(config, 'variant') === 'permanent') && transition.root, get(PaperProps, 'className')),
          onMouseEnter: wrapOnMouseEnter(PaperProps),
          onMouseLeave: wrapOnMouseLeave(PaperProps)
        }),
        ModalProps: _extends({
          container: iDocument ? iDocument.body : undefined
        }, ModalProps),
        SlideProps: _extends(_extends({}, SlideProps), {}, {
          onEntered: wrapOnEntered(SlideProps),
          onExit: wrapOnExit(SlideProps)
        }),
        anchor: anchor,
        open: state.open,
        onOpen: wrappedOnOpen,
        onClose: wrappedOnClose
      });

      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TemporarySwipeableDrawer, _extends({
        disableScrollLock: true
      }, commonProps, {
        hiddenStyles: createHiddenStyles(temporary, [permanent, persistent], breakpoints),
        styles: createBreakpointStyles(temporary, theme)
      }), children), /*#__PURE__*/React.createElement(PersistentSwipeableDrawer, _extends({}, commonProps, {
        hiddenStyles: createHiddenStyles(persistent, [temporary, permanent], breakpoints),
        styles: createBreakpointStyles(persistent, theme)
      }), headerAdjustment, children), /*#__PURE__*/React.createElement(PermanentSwipeableDrawer, _extends({}, commonProps, {
        hiddenStyles: createHiddenStyles(permanent, [temporary, persistent], breakpoints),
        styles: createBreakpointStyles(permanent, theme)
      }), headerAdjustment, children));
    }));
  };

  return SwipeableSidebar;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,