function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import cx from 'clsx';
import useTheme from '@material-ui/core/styles/useTheme';
import { generateStyledProxyCreator } from '../Shared/StyledProxy';
import { createBreakpointStyles, CSS_TRANSITION } from '../../utils';
import { useLayoutCtx } from '../../contexts';
import SubheaderCompiler from '../../compilers/SubheaderCompiler';
import HeaderOffsetCompiler from '../../compilers/HeaderOffsetCompiler';
export default (function (styled) {
  var styledProxy = generateStyledProxyCreator(styled);
  var Div = styledProxy('div');

  var Subheader = function Subheader(_ref) {
    var className = _ref.className,
        subheaderId = _ref.subheaderId,
        props = _objectWithoutProperties(_ref, ["className", "subheaderId"]);

    if (!subheaderId) {
      throw new Error('You must provide "subheaderId" prop to <Subheader />');
    }

    var theme = useTheme();

    var _useLayoutCtx = useLayoutCtx(),
        data = _useLayoutCtx.data,
        state = _useLayoutCtx.state;

    var compiler = SubheaderCompiler(state, data.subheader, data.edgeSidebar);
    var styles = createBreakpointStyles(compiler.getResultStyle(subheaderId), theme);
    var offsetCompiler = HeaderOffsetCompiler(data.subheader.configMapById[subheaderId]);
    var offsetStyles = createBreakpointStyles(offsetCompiler.getResultStyle(), theme);
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Div, _extends({
      className: cx('Subheader', className),
      "mui-layout": subheaderId,
      styles: _extends({
        zIndex: 1000,
        transition: CSS_TRANSITION
      }, styles)
    }, props)), /*#__PURE__*/React.createElement(Div, {
      className: cx('SubheaderOffset', className),
      styles: _extends({
        transition: CSS_TRANSITION,
        height: 0
      }, offsetStyles)
    }));
  };

  return Subheader;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1N1YmhlYWRlci9TdWJoZWFkZXIudHN4Il0sIm5hbWVzIjpbIlJlYWN0IiwiY3giLCJ1c2VUaGVtZSIsImdlbmVyYXRlU3R5bGVkUHJveHlDcmVhdG9yIiwiY3JlYXRlQnJlYWtwb2ludFN0eWxlcyIsIkNTU19UUkFOU0lUSU9OIiwidXNlTGF5b3V0Q3R4IiwiU3ViaGVhZGVyQ29tcGlsZXIiLCJIZWFkZXJPZmZzZXRDb21waWxlciIsInN0eWxlZCIsInN0eWxlZFByb3h5IiwiRGl2IiwiU3ViaGVhZGVyIiwiY2xhc3NOYW1lIiwic3ViaGVhZGVySWQiLCJwcm9wcyIsIkVycm9yIiwidGhlbWUiLCJkYXRhIiwic3RhdGUiLCJjb21waWxlciIsInN1YmhlYWRlciIsImVkZ2VTaWRlYmFyIiwic3R5bGVzIiwiZ2V0UmVzdWx0U3R5bGUiLCJvZmZzZXRDb21waWxlciIsImNvbmZpZ01hcEJ5SWQiLCJvZmZzZXRTdHlsZXMiLCJ6SW5kZXgiLCJ0cmFuc2l0aW9uIiwiaGVpZ2h0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsRUFBUCxNQUFlLE1BQWY7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLG1DQUFyQjtBQUNBLFNBQVNDLDBCQUFULFFBQTJDLHVCQUEzQztBQUNBLFNBQVNDLHNCQUFULEVBQWlDQyxjQUFqQyxRQUF1RCxhQUF2RDtBQUNBLFNBQVNDLFlBQVQsUUFBNkIsZ0JBQTdCO0FBQ0EsT0FBT0MsaUJBQVAsTUFBOEIsbUNBQTlCO0FBQ0EsT0FBT0Msb0JBQVAsTUFBaUMsc0NBQWpDO0FBRUEsZ0JBQWUsVUFBQ0MsTUFBRCxFQUFpQjtBQUM5QixNQUFNQyxXQUFXLEdBQUdQLDBCQUEwQixDQUFDTSxNQUFELENBQTlDO0FBQ0EsTUFBTUUsR0FBRyxHQUFHRCxXQUFXLENBQUMsS0FBRCxDQUF2Qjs7QUFFQSxNQUFNRSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxPQUlvRDtBQUFBLFFBSHBFQyxTQUdvRSxRQUhwRUEsU0FHb0U7QUFBQSxRQUZwRUMsV0FFb0UsUUFGcEVBLFdBRW9FO0FBQUEsUUFEakVDLEtBQ2lFOztBQUNwRSxRQUFJLENBQUNELFdBQUwsRUFBa0I7QUFDaEIsWUFBTSxJQUFJRSxLQUFKLENBQVUsc0RBQVYsQ0FBTjtBQUNEOztBQUNELFFBQU1DLEtBQUssR0FBR2YsUUFBUSxFQUF0Qjs7QUFKb0Usd0JBSzVDSSxZQUFZLEVBTGdDO0FBQUEsUUFLNURZLElBTDRELGlCQUs1REEsSUFMNEQ7QUFBQSxRQUt0REMsS0FMc0QsaUJBS3REQSxLQUxzRDs7QUFNcEUsUUFBTUMsUUFBUSxHQUFHYixpQkFBaUIsQ0FBQ1ksS0FBRCxFQUFRRCxJQUFJLENBQUNHLFNBQWIsRUFBd0JILElBQUksQ0FBQ0ksV0FBN0IsQ0FBbEM7QUFDQSxRQUFNQyxNQUFNLEdBQUduQixzQkFBc0IsQ0FDbkNnQixRQUFRLENBQUNJLGNBQVQsQ0FBd0JWLFdBQXhCLENBRG1DLEVBRW5DRyxLQUZtQyxDQUFyQztBQUlBLFFBQU1RLGNBQWMsR0FBR2pCLG9CQUFvQixDQUN6Q1UsSUFBSSxDQUFDRyxTQUFMLENBQWVLLGFBQWYsQ0FBNkJaLFdBQTdCLENBRHlDLENBQTNDO0FBR0EsUUFBTWEsWUFBWSxHQUFHdkIsc0JBQXNCLENBQ3pDcUIsY0FBYyxDQUFDRCxjQUFmLEVBRHlDLEVBRXpDUCxLQUZ5QyxDQUEzQztBQUlBLHdCQUNFLHVEQUNFLG9CQUFDLEdBQUQ7QUFDRSxNQUFBLFNBQVMsRUFBRWhCLEVBQUUsQ0FBQyxXQUFELEVBQWNZLFNBQWQsQ0FEZjtBQUVFLG9CQUFZQyxXQUZkO0FBR0UsTUFBQSxNQUFNO0FBQUljLFFBQUFBLE1BQU0sRUFBRSxJQUFaO0FBQWtCQyxRQUFBQSxVQUFVLEVBQUV4QjtBQUE5QixTQUFpRGtCLE1BQWpEO0FBSFIsT0FJTVIsS0FKTixFQURGLGVBT0Usb0JBQUMsR0FBRDtBQUNFLE1BQUEsU0FBUyxFQUFFZCxFQUFFLENBQUMsaUJBQUQsRUFBb0JZLFNBQXBCLENBRGY7QUFFRSxNQUFBLE1BQU07QUFBSWdCLFFBQUFBLFVBQVUsRUFBRXhCLGNBQWhCO0FBQWdDeUIsUUFBQUEsTUFBTSxFQUFFO0FBQXhDLFNBQThDSCxZQUE5QztBQUZSLE1BUEYsQ0FERjtBQWNELEdBcENEOztBQXFDQSxTQUFPZixTQUFQO0FBQ0QsQ0ExQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyBnZW5lcmF0ZVN0eWxlZFByb3h5Q3JlYXRvciB9IGZyb20gJy4uL1NoYXJlZC9TdHlsZWRQcm94eSc7XG5pbXBvcnQgeyBjcmVhdGVCcmVha3BvaW50U3R5bGVzLCBDU1NfVFJBTlNJVElPTiB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IHVzZUxheW91dEN0eCB9IGZyb20gJy4uLy4uL2NvbnRleHRzJztcbmltcG9ydCBTdWJoZWFkZXJDb21waWxlciBmcm9tICcuLi8uLi9jb21waWxlcnMvU3ViaGVhZGVyQ29tcGlsZXInO1xuaW1wb3J0IEhlYWRlck9mZnNldENvbXBpbGVyIGZyb20gJy4uLy4uL2NvbXBpbGVycy9IZWFkZXJPZmZzZXRDb21waWxlcic7XG5cbmV4cG9ydCBkZWZhdWx0IChzdHlsZWQ6IGFueSkgPT4ge1xuICBjb25zdCBzdHlsZWRQcm94eSA9IGdlbmVyYXRlU3R5bGVkUHJveHlDcmVhdG9yKHN0eWxlZCk7XG4gIGNvbnN0IERpdiA9IHN0eWxlZFByb3h5KCdkaXYnKTtcblxuICBjb25zdCBTdWJoZWFkZXIgPSAoe1xuICAgIGNsYXNzTmFtZSxcbiAgICBzdWJoZWFkZXJJZCxcbiAgICAuLi5wcm9wc1xuICB9OiBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4gJiB7IHN1YmhlYWRlcklkOiBzdHJpbmcgfSkgPT4ge1xuICAgIGlmICghc3ViaGVhZGVySWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgcHJvdmlkZSBcInN1YmhlYWRlcklkXCIgcHJvcCB0byA8U3ViaGVhZGVyIC8+Jyk7XG4gICAgfVxuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgICBjb25zdCB7IGRhdGEsIHN0YXRlIH0gPSB1c2VMYXlvdXRDdHgoKTtcbiAgICBjb25zdCBjb21waWxlciA9IFN1YmhlYWRlckNvbXBpbGVyKHN0YXRlLCBkYXRhLnN1YmhlYWRlciwgZGF0YS5lZGdlU2lkZWJhcik7XG4gICAgY29uc3Qgc3R5bGVzID0gY3JlYXRlQnJlYWtwb2ludFN0eWxlcyhcbiAgICAgIGNvbXBpbGVyLmdldFJlc3VsdFN0eWxlKHN1YmhlYWRlcklkKSxcbiAgICAgIHRoZW1lXG4gICAgKTtcbiAgICBjb25zdCBvZmZzZXRDb21waWxlciA9IEhlYWRlck9mZnNldENvbXBpbGVyKFxuICAgICAgZGF0YS5zdWJoZWFkZXIuY29uZmlnTWFwQnlJZFtzdWJoZWFkZXJJZF1cbiAgICApO1xuICAgIGNvbnN0IG9mZnNldFN0eWxlcyA9IGNyZWF0ZUJyZWFrcG9pbnRTdHlsZXMoXG4gICAgICBvZmZzZXRDb21waWxlci5nZXRSZXN1bHRTdHlsZSgpLFxuICAgICAgdGhlbWVcbiAgICApO1xuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8RGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtjeCgnU3ViaGVhZGVyJywgY2xhc3NOYW1lKX1cbiAgICAgICAgICBtdWktbGF5b3V0PXtzdWJoZWFkZXJJZH1cbiAgICAgICAgICBzdHlsZXM9e3sgekluZGV4OiAxMDAwLCB0cmFuc2l0aW9uOiBDU1NfVFJBTlNJVElPTiwgLi4uc3R5bGVzIH19XG4gICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAvPlxuICAgICAgICA8RGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtjeCgnU3ViaGVhZGVyT2Zmc2V0JywgY2xhc3NOYW1lKX1cbiAgICAgICAgICBzdHlsZXM9e3sgdHJhbnNpdGlvbjogQ1NTX1RSQU5TSVRJT04sIGhlaWdodDogMCwgLi4ub2Zmc2V0U3R5bGVzIH19XG4gICAgICAgIC8+XG4gICAgICA8Lz5cbiAgICApO1xuICB9O1xuICByZXR1cm4gU3ViaGVhZGVyO1xufTtcbiJdfQ==