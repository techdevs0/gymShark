import HeaderBuilder from './Header';
import SubheaderBuilder from './Subheader';
import EdgeSidebarBuilder from './EdgeSidebar';
import ContentBuilder from './Content';
import FooterBuilder from './Footer';
import InsetSidebarBuilder from './InsetSidebar';
import { DEFAULT_CONTENT_ID, toObject } from '../utils';
export default (function () {
  var initialLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var global = initialLayout.global || {
    autoCollapse: {}
  };
  var header = HeaderBuilder(initialLayout.header);
  var subheader = SubheaderBuilder(initialLayout.subheader);
  var edgeSidebar = EdgeSidebarBuilder(initialLayout.edgeSidebar);
  var insetSidebar = InsetSidebarBuilder(initialLayout.insetSidebar);
  var content = ContentBuilder();
  var footer = FooterBuilder(); // setup default id

  content.create(DEFAULT_CONTENT_ID);
  return {
    configureHeader: function configureHeader(callback) {
      callback(header);
    },
    configureSubheader: function configureSubheader(callback) {
      callback(subheader);
    },
    configureEdgeSidebar: function configureEdgeSidebar(callback) {
      callback(edgeSidebar);
    },
    configureInsetSidebar: function configureInsetSidebar(callback) {
      callback(insetSidebar);
    },
    enableAutoCollapse: function enableAutoCollapse(sidebarId) {
      var breakpoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'md';
      global.autoCollapse[sidebarId] = breakpoint;
    },
    getComponentData: function getComponentData() {
      return {
        global: global,
        edgeSidebar: edgeSidebar.getData(),
        insetSidebar: insetSidebar.getData(),
        header: header.getData(),
        headerId: header.getId(),
        subheader: subheader.getData(),
        content: {
          id: content.getId()
        },
        footer: {
          id: footer.getId()
        }
      };
    },
    clone: function clone() {
      return (// use this approach as deep clone for now
        JSON.parse(JSON.stringify({
          header: header.getData(),
          subheader: subheader.getData(),
          edgeSidebar: edgeSidebar.getData().configMapById,
          insetSidebar: insetSidebar.getData().configMapById,
          content: content.getData(),
          footer: footer.getData()
        }))
      );
    },
    getInitialState: function getInitialState() {
      var _edgeSidebar$getData = edgeSidebar.getData(),
          ids = _edgeSidebar$getData.ids;

      return {
        sidebar: toObject(ids, function () {
          return {
            open: false,
            collapsed: false
          };
        })
      };
    },
    debug: function debug() {
      if (process.env.NODE_ENV !== 'production') {
        header.debug();
        subheader.debug();
        edgeSidebar.debug();
        insetSidebar.debug();
        content.debug();
        footer.debug();
      }
    },
    getJSON: function getJSON() {
      console.log(JSON.stringify({
        header: header.getData(),
        subheader: subheader.getData(),
        edgeSidebar: edgeSidebar.getData().configMapById,
        insetSidebar: insetSidebar.getData().configMapById
      }, null, 2));
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,