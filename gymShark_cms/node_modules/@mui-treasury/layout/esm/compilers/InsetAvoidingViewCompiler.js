function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { isAbsoluteInsetSidebarConfig, isFixedInsetSidebarConfig } from "../utils/sidebarChecker";
import { createFixedInsetSidebarEffect } from "../effects/FixedInsetSidebar";
import { createAbsoluteInsetSidebarEffect } from "../effects/AbsoluteInsetSidebar";
export default (function (insetSidebar) {
  var iterateBreakpoints = function iterateBreakpoints(breakpoints, result, configMap) {
    var lastConfig = undefined;
    breakpoints.keys.forEach(function (bp) {
      var config = configMap[bp];

      if (config) {
        lastConfig = config;
      }

      if (lastConfig && isFixedInsetSidebarConfig(lastConfig)) {
        result[breakpoints.only(bp)] = _extends(_extends({}, result[breakpoints.only(bp)]), createFixedInsetSidebarEffect(lastConfig).getAvoidingStyle());
      }

      if (lastConfig && isAbsoluteInsetSidebarConfig(lastConfig)) {
        result[breakpoints.only(bp)] = _extends(_extends({}, result[breakpoints.only(bp)]), createAbsoluteInsetSidebarEffect(lastConfig).getAvoidingStyle());
      }
    });
  };

  return {
    getMediaQueryStyle: function getMediaQueryStyle(breakpoints) {
      var sidebarIds = Object.keys(insetSidebar.configMapById);
      var styles = {};
      sidebarIds.forEach(function (id) {
        var configMap = insetSidebar.configMapById[id];
        iterateBreakpoints(breakpoints, styles, configMap);
      });
      return styles;
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlcnMvSW5zZXRBdm9pZGluZ1ZpZXdDb21waWxlci50cyJdLCJuYW1lcyI6WyJpc0Fic29sdXRlSW5zZXRTaWRlYmFyQ29uZmlnIiwiaXNGaXhlZEluc2V0U2lkZWJhckNvbmZpZyIsImNyZWF0ZUZpeGVkSW5zZXRTaWRlYmFyRWZmZWN0IiwiY3JlYXRlQWJzb2x1dGVJbnNldFNpZGViYXJFZmZlY3QiLCJpbnNldFNpZGViYXIiLCJpdGVyYXRlQnJlYWtwb2ludHMiLCJicmVha3BvaW50cyIsInJlc3VsdCIsImNvbmZpZ01hcCIsImxhc3RDb25maWciLCJ1bmRlZmluZWQiLCJrZXlzIiwiZm9yRWFjaCIsImJwIiwiY29uZmlnIiwib25seSIsImdldEF2b2lkaW5nU3R5bGUiLCJnZXRNZWRpYVF1ZXJ5U3R5bGUiLCJzaWRlYmFySWRzIiwiT2JqZWN0IiwiY29uZmlnTWFwQnlJZCIsInN0eWxlcyIsImlkIl0sIm1hcHBpbmdzIjoiOztBQUdBLFNBQ0VBLDRCQURGLEVBRUVDLHlCQUZGLFFBR08seUJBSFA7QUFJQSxTQUFTQyw2QkFBVCxRQUE4Qyw4QkFBOUM7QUFDQSxTQUFTQyxnQ0FBVCxRQUFpRCxpQ0FBakQ7QUFFQSxnQkFBZSxVQUFDQyxZQUFELEVBQTJEO0FBQ3hFLE1BQU1DLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBcUIsQ0FDekJDLFdBRHlCLEVBRXpCQyxNQUZ5QixFQUd6QkMsU0FIeUIsRUFJdEI7QUFDSCxRQUFJQyxVQUE4QixHQUFHQyxTQUFyQztBQUNBSixJQUFBQSxXQUFXLENBQUNLLElBQVosQ0FBaUJDLE9BQWpCLENBQXlCLFVBQUFDLEVBQUUsRUFBSTtBQUM3QixVQUFNQyxNQUFNLEdBQUdOLFNBQVMsQ0FBQ0ssRUFBRCxDQUF4Qjs7QUFDQSxVQUFJQyxNQUFKLEVBQVk7QUFDVkwsUUFBQUEsVUFBVSxHQUFHSyxNQUFiO0FBQ0Q7O0FBQ0QsVUFBSUwsVUFBVSxJQUFJUix5QkFBeUIsQ0FBQ1EsVUFBRCxDQUEzQyxFQUF5RDtBQUN2REYsUUFBQUEsTUFBTSxDQUFDRCxXQUFXLENBQUNTLElBQVosQ0FBaUJGLEVBQWpCLENBQUQsQ0FBTix5QkFDTU4sTUFBTSxDQUFDRCxXQUFXLENBQUNTLElBQVosQ0FBaUJGLEVBQWpCLENBQUQsQ0FEWixHQUVLWCw2QkFBNkIsQ0FBQ08sVUFBRCxDQUE3QixDQUEwQ08sZ0JBQTFDLEVBRkw7QUFJRDs7QUFDRCxVQUFJUCxVQUFVLElBQUlULDRCQUE0QixDQUFDUyxVQUFELENBQTlDLEVBQTREO0FBQzFERixRQUFBQSxNQUFNLENBQUNELFdBQVcsQ0FBQ1MsSUFBWixDQUFpQkYsRUFBakIsQ0FBRCxDQUFOLHlCQUNNTixNQUFNLENBQUNELFdBQVcsQ0FBQ1MsSUFBWixDQUFpQkYsRUFBakIsQ0FBRCxDQURaLEdBRUtWLGdDQUFnQyxDQUFDTSxVQUFELENBQWhDLENBQTZDTyxnQkFBN0MsRUFGTDtBQUlEO0FBQ0YsS0FqQkQ7QUFrQkQsR0F4QkQ7O0FBMEJBLFNBQU87QUFDTEMsSUFBQUEsa0JBQWtCLEVBQUUsNEJBQUNYLFdBQUQsRUFBOEI7QUFDaEQsVUFBTVksVUFBVSxHQUFHQyxNQUFNLENBQUNSLElBQVAsQ0FBWVAsWUFBWSxDQUFDZ0IsYUFBekIsQ0FBbkI7QUFDQSxVQUFJQyxNQUFvQixHQUFHLEVBQTNCO0FBQ0FILE1BQUFBLFVBQVUsQ0FBQ04sT0FBWCxDQUFtQixVQUFBVSxFQUFFLEVBQUk7QUFDdkIsWUFBTWQsU0FBUyxHQUFHSixZQUFZLENBQUNnQixhQUFiLENBQTJCRSxFQUEzQixDQUFsQjtBQUNBakIsUUFBQUEsa0JBQWtCLENBQUNDLFdBQUQsRUFBY2UsTUFBZCxFQUFzQmIsU0FBdEIsQ0FBbEI7QUFDRCxPQUhEO0FBS0EsYUFBT2EsTUFBUDtBQUNEO0FBVkksR0FBUDtBQVlELENBdkNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnJlYWtwb2ludHMgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzXCJcbmltcG9ydCB7IEluc2V0U2lkZWJhckNvbmZpZywgSW5zZXRTaWRlYmFyRGF0YSwgTWFwQnJlYWtwb2ludCB9IGZyb20gXCIuLi90eXBlc1wiXG5pbXBvcnQgeyBNZWRpYVF1ZXJpZXMgfSBmcm9tIFwiLi4vdXRpbHMvY3JlYXRlQnJlYWtwb2ludFN0eWxlc1wiXG5pbXBvcnQge1xuICBpc0Fic29sdXRlSW5zZXRTaWRlYmFyQ29uZmlnLFxuICBpc0ZpeGVkSW5zZXRTaWRlYmFyQ29uZmlnLFxufSBmcm9tIFwiLi4vdXRpbHMvc2lkZWJhckNoZWNrZXJcIlxuaW1wb3J0IHsgY3JlYXRlRml4ZWRJbnNldFNpZGViYXJFZmZlY3QgfSBmcm9tIFwiLi4vZWZmZWN0cy9GaXhlZEluc2V0U2lkZWJhclwiXG5pbXBvcnQgeyBjcmVhdGVBYnNvbHV0ZUluc2V0U2lkZWJhckVmZmVjdCB9IGZyb20gXCIuLi9lZmZlY3RzL0Fic29sdXRlSW5zZXRTaWRlYmFyXCJcblxuZXhwb3J0IGRlZmF1bHQgKGluc2V0U2lkZWJhcjogUGljazxJbnNldFNpZGViYXJEYXRhLCBcImNvbmZpZ01hcEJ5SWRcIj4pID0+IHtcbiAgY29uc3QgaXRlcmF0ZUJyZWFrcG9pbnRzID0gKFxuICAgIGJyZWFrcG9pbnRzOiBCcmVha3BvaW50cyxcbiAgICByZXN1bHQ6IE1lZGlhUXVlcmllcyxcbiAgICBjb25maWdNYXA6IE1hcEJyZWFrcG9pbnQ8SW5zZXRTaWRlYmFyQ29uZmlnPlxuICApID0+IHtcbiAgICBsZXQgbGFzdENvbmZpZzogSW5zZXRTaWRlYmFyQ29uZmlnID0gdW5kZWZpbmVkXG4gICAgYnJlYWtwb2ludHMua2V5cy5mb3JFYWNoKGJwID0+IHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IGNvbmZpZ01hcFticF1cbiAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgbGFzdENvbmZpZyA9IGNvbmZpZ1xuICAgICAgfVxuICAgICAgaWYgKGxhc3RDb25maWcgJiYgaXNGaXhlZEluc2V0U2lkZWJhckNvbmZpZyhsYXN0Q29uZmlnKSkge1xuICAgICAgICByZXN1bHRbYnJlYWtwb2ludHMub25seShicCldID0ge1xuICAgICAgICAgIC4uLihyZXN1bHRbYnJlYWtwb2ludHMub25seShicCldIGFzIG9iamVjdCksXG4gICAgICAgICAgLi4uY3JlYXRlRml4ZWRJbnNldFNpZGViYXJFZmZlY3QobGFzdENvbmZpZykuZ2V0QXZvaWRpbmdTdHlsZSgpLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobGFzdENvbmZpZyAmJiBpc0Fic29sdXRlSW5zZXRTaWRlYmFyQ29uZmlnKGxhc3RDb25maWcpKSB7XG4gICAgICAgIHJlc3VsdFticmVha3BvaW50cy5vbmx5KGJwKV0gPSB7XG4gICAgICAgICAgLi4uKHJlc3VsdFticmVha3BvaW50cy5vbmx5KGJwKV0gYXMgb2JqZWN0KSxcbiAgICAgICAgICAuLi5jcmVhdGVBYnNvbHV0ZUluc2V0U2lkZWJhckVmZmVjdChsYXN0Q29uZmlnKS5nZXRBdm9pZGluZ1N0eWxlKCksXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRNZWRpYVF1ZXJ5U3R5bGU6IChicmVha3BvaW50czogQnJlYWtwb2ludHMpID0+IHtcbiAgICAgIGNvbnN0IHNpZGViYXJJZHMgPSBPYmplY3Qua2V5cyhpbnNldFNpZGViYXIuY29uZmlnTWFwQnlJZClcbiAgICAgIGxldCBzdHlsZXM6IE1lZGlhUXVlcmllcyA9IHt9XG4gICAgICBzaWRlYmFySWRzLmZvckVhY2goaWQgPT4ge1xuICAgICAgICBjb25zdCBjb25maWdNYXAgPSBpbnNldFNpZGViYXIuY29uZmlnTWFwQnlJZFtpZF1cbiAgICAgICAgaXRlcmF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzLCBzdHlsZXMsIGNvbmZpZ01hcClcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBzdHlsZXNcbiAgICB9LFxuICB9XG59XG4iXX0=