import { pickNearestBreakpoint } from "../utils";
import { isAbsoluteInsetSidebarConfig, isFixedInsetSidebarConfig, isStickyInsetSidebarConfig } from "../utils/sidebarChecker";
import StickyInset from "../models/Sidebar/Inset/StickyInset";
import AbsoluteInset from "../models/Sidebar/Inset/AbsoluteInset";
import FixedInset from "../models/Sidebar/Inset/FixedInset";
export default (function (insetSidebar, header) {
  return {
    getVariant: function getVariant(sidebarId) {
      var config = pickNearestBreakpoint(insetSidebar.configMapById[sidebarId], "xl");
      return config.variant;
    },
    getResultStyle: function getResultStyle(sidebarId) {
      var result = {
        root: {},
        body: {}
      };
      var configMap = insetSidebar.configMapById[sidebarId];
      var breakpoints = Object.keys(configMap);
      breakpoints.forEach(function (bp) {
        var config = pickNearestBreakpoint(configMap, bp);
        var headerConfig = pickNearestBreakpoint(header, bp);

        if (config) {
          var model;

          if (isStickyInsetSidebarConfig(config)) {
            model = StickyInset(config);
          } else if (isAbsoluteInsetSidebarConfig(config)) {
            model = AbsoluteInset(config, headerConfig);
          } else if (isFixedInsetSidebarConfig(config)) {
            model = FixedInset(config);
          }

          result.root[bp] = model.getRootStyle();
          result.body[bp] = model.getBodyStyle();
        }
      });
      return result;
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlcnMvSW5zZXRTaWRlYmFyQ29tcGlsZXIudHMiXSwibmFtZXMiOlsicGlja05lYXJlc3RCcmVha3BvaW50IiwiaXNBYnNvbHV0ZUluc2V0U2lkZWJhckNvbmZpZyIsImlzRml4ZWRJbnNldFNpZGViYXJDb25maWciLCJpc1N0aWNreUluc2V0U2lkZWJhckNvbmZpZyIsIlN0aWNreUluc2V0IiwiQWJzb2x1dGVJbnNldCIsIkZpeGVkSW5zZXQiLCJpbnNldFNpZGViYXIiLCJoZWFkZXIiLCJnZXRWYXJpYW50Iiwic2lkZWJhcklkIiwiY29uZmlnIiwiY29uZmlnTWFwQnlJZCIsInZhcmlhbnQiLCJnZXRSZXN1bHRTdHlsZSIsInJlc3VsdCIsInJvb3QiLCJib2R5IiwiY29uZmlnTWFwIiwiYnJlYWtwb2ludHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImJwIiwiaGVhZGVyQ29uZmlnIiwibW9kZWwiLCJnZXRSb290U3R5bGUiLCJnZXRCb2R5U3R5bGUiXSwibWFwcGluZ3MiOiJBQU9BLFNBQVNBLHFCQUFULFFBQXNDLFVBQXRDO0FBQ0EsU0FDRUMsNEJBREYsRUFFRUMseUJBRkYsRUFHRUMsMEJBSEYsUUFJTyx5QkFKUDtBQUtBLE9BQU9DLFdBQVAsTUFBd0IscUNBQXhCO0FBQ0EsT0FBT0MsYUFBUCxNQUEwQix1Q0FBMUI7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLG9DQUF2QjtBQUVBLGdCQUFlLFVBQUNDLFlBQUQsRUFBd0RDLE1BQXhELEVBQW9GO0FBQ2pHLFNBQU87QUFDTEMsSUFBQUEsVUFBVSxFQUFFLG9CQUFDQyxTQUFELEVBQStCO0FBQ3pDLFVBQU1DLE1BQU0sR0FBR1gscUJBQXFCLENBQ2xDTyxZQUFZLENBQUNLLGFBQWIsQ0FBMkJGLFNBQTNCLENBRGtDLEVBRWxDLElBRmtDLENBQXBDO0FBSUEsYUFBT0MsTUFBTSxDQUFDRSxPQUFkO0FBQ0QsS0FQSTtBQVFMQyxJQUFBQSxjQUFjLEVBQUUsd0JBQUNKLFNBQUQsRUFBZ0Q7QUFDOUQsVUFBTUssTUFBK0IsR0FBRztBQUFFQyxRQUFBQSxJQUFJLEVBQUUsRUFBUjtBQUFZQyxRQUFBQSxJQUFJLEVBQUU7QUFBbEIsT0FBeEM7QUFDQSxVQUFNQyxTQUFTLEdBQUdYLFlBQVksQ0FBQ0ssYUFBYixDQUEyQkYsU0FBM0IsQ0FBbEI7QUFDQSxVQUFNUyxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxTQUFaLENBQXBCO0FBQ0FDLE1BQUFBLFdBQVcsQ0FBQ0csT0FBWixDQUFvQixVQUFDQyxFQUFELEVBQW9CO0FBQ3RDLFlBQU1aLE1BQTBCLEdBQUdYLHFCQUFxQixDQUFDa0IsU0FBRCxFQUFZSyxFQUFaLENBQXhEO0FBQ0EsWUFBTUMsWUFBWSxHQUFHeEIscUJBQXFCLENBQUNRLE1BQUQsRUFBU2UsRUFBVCxDQUExQzs7QUFDQSxZQUFJWixNQUFKLEVBQVk7QUFDVixjQUFJYyxLQUFKOztBQUNBLGNBQUl0QiwwQkFBMEIsQ0FBQ1EsTUFBRCxDQUE5QixFQUF3QztBQUN0Q2MsWUFBQUEsS0FBSyxHQUFHckIsV0FBVyxDQUFDTyxNQUFELENBQW5CO0FBQ0QsV0FGRCxNQUVPLElBQUlWLDRCQUE0QixDQUFDVSxNQUFELENBQWhDLEVBQTBDO0FBQy9DYyxZQUFBQSxLQUFLLEdBQUdwQixhQUFhLENBQUNNLE1BQUQsRUFBU2EsWUFBVCxDQUFyQjtBQUNELFdBRk0sTUFFQSxJQUFJdEIseUJBQXlCLENBQUNTLE1BQUQsQ0FBN0IsRUFBdUM7QUFDNUNjLFlBQUFBLEtBQUssR0FBR25CLFVBQVUsQ0FBQ0ssTUFBRCxDQUFsQjtBQUNEOztBQUVESSxVQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWU8sRUFBWixJQUFrQkUsS0FBSyxDQUFDQyxZQUFOLEVBQWxCO0FBQ0FYLFVBQUFBLE1BQU0sQ0FBQ0UsSUFBUCxDQUFZTSxFQUFaLElBQWtCRSxLQUFLLENBQUNFLFlBQU4sRUFBbEI7QUFDRDtBQUNGLE9BaEJEO0FBaUJBLGFBQU9aLE1BQVA7QUFDRDtBQTlCSSxHQUFQO0FBZ0NELENBakNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSGVhZGVyQ29uZmlnTWFwLFxuICBJbnNldFNpZGViYXJDb25maWcsXG4gIEluc2V0U2lkZWJhckRhdGEsXG4gIEluc2V0U2lkZWJhclJlc3VsdFN0eWxlLFxufSBmcm9tIFwiLi4vdHlwZXNcIlxuaW1wb3J0IHsgQnJlYWtwb2ludCB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlQnJlYWtwb2ludHNcIlxuaW1wb3J0IHsgcGlja05lYXJlc3RCcmVha3BvaW50IH0gZnJvbSBcIi4uL3V0aWxzXCJcbmltcG9ydCB7XG4gIGlzQWJzb2x1dGVJbnNldFNpZGViYXJDb25maWcsXG4gIGlzRml4ZWRJbnNldFNpZGViYXJDb25maWcsXG4gIGlzU3RpY2t5SW5zZXRTaWRlYmFyQ29uZmlnLFxufSBmcm9tIFwiLi4vdXRpbHMvc2lkZWJhckNoZWNrZXJcIlxuaW1wb3J0IFN0aWNreUluc2V0IGZyb20gXCIuLi9tb2RlbHMvU2lkZWJhci9JbnNldC9TdGlja3lJbnNldFwiXG5pbXBvcnQgQWJzb2x1dGVJbnNldCBmcm9tIFwiLi4vbW9kZWxzL1NpZGViYXIvSW5zZXQvQWJzb2x1dGVJbnNldFwiXG5pbXBvcnQgRml4ZWRJbnNldCBmcm9tIFwiLi4vbW9kZWxzL1NpZGViYXIvSW5zZXQvRml4ZWRJbnNldFwiXG5cbmV4cG9ydCBkZWZhdWx0IChpbnNldFNpZGViYXI6IFBpY2s8SW5zZXRTaWRlYmFyRGF0YSwgXCJjb25maWdNYXBCeUlkXCI+LCBoZWFkZXI6IEhlYWRlckNvbmZpZ01hcCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGdldFZhcmlhbnQ6IChzaWRlYmFySWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgICBjb25zdCBjb25maWcgPSBwaWNrTmVhcmVzdEJyZWFrcG9pbnQoXG4gICAgICAgIGluc2V0U2lkZWJhci5jb25maWdNYXBCeUlkW3NpZGViYXJJZF0sXG4gICAgICAgIFwieGxcIlxuICAgICAgKVxuICAgICAgcmV0dXJuIGNvbmZpZy52YXJpYW50XG4gICAgfSxcbiAgICBnZXRSZXN1bHRTdHlsZTogKHNpZGViYXJJZDogc3RyaW5nKTogSW5zZXRTaWRlYmFyUmVzdWx0U3R5bGUgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0OiBJbnNldFNpZGViYXJSZXN1bHRTdHlsZSA9IHsgcm9vdDoge30sIGJvZHk6IHt9IH1cbiAgICAgIGNvbnN0IGNvbmZpZ01hcCA9IGluc2V0U2lkZWJhci5jb25maWdNYXBCeUlkW3NpZGViYXJJZF1cbiAgICAgIGNvbnN0IGJyZWFrcG9pbnRzID0gT2JqZWN0LmtleXMoY29uZmlnTWFwKVxuICAgICAgYnJlYWtwb2ludHMuZm9yRWFjaCgoYnA6IEJyZWFrcG9pbnQpID0+IHtcbiAgICAgICAgY29uc3QgY29uZmlnOiBJbnNldFNpZGViYXJDb25maWcgPSBwaWNrTmVhcmVzdEJyZWFrcG9pbnQoY29uZmlnTWFwLCBicClcbiAgICAgICAgY29uc3QgaGVhZGVyQ29uZmlnID0gcGlja05lYXJlc3RCcmVha3BvaW50KGhlYWRlciwgYnApXG4gICAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgICBsZXQgbW9kZWw6IHsgZ2V0Um9vdFN0eWxlOiAoKSA9PiB7fTsgZ2V0Qm9keVN0eWxlOiAoKSA9PiB7fSB9XG4gICAgICAgICAgaWYgKGlzU3RpY2t5SW5zZXRTaWRlYmFyQ29uZmlnKGNvbmZpZykpIHtcbiAgICAgICAgICAgIG1vZGVsID0gU3RpY2t5SW5zZXQoY29uZmlnKVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNBYnNvbHV0ZUluc2V0U2lkZWJhckNvbmZpZyhjb25maWcpKSB7XG4gICAgICAgICAgICBtb2RlbCA9IEFic29sdXRlSW5zZXQoY29uZmlnLCBoZWFkZXJDb25maWcpXG4gICAgICAgICAgfSBlbHNlIGlmIChpc0ZpeGVkSW5zZXRTaWRlYmFyQ29uZmlnKGNvbmZpZykpIHtcbiAgICAgICAgICAgIG1vZGVsID0gRml4ZWRJbnNldChjb25maWcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzdWx0LnJvb3RbYnBdID0gbW9kZWwuZ2V0Um9vdFN0eWxlKClcbiAgICAgICAgICByZXN1bHQuYm9keVticF0gPSBtb2RlbC5nZXRCb2R5U3R5bGUoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH0sXG4gIH1cbn1cbiJdfQ==