function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import HeaderEffect from '../effects/Header';
import { combineBreakpoints, pickNearestBreakpoint } from '../utils';
import { isPermanentSidebarConfig, isPersistentSidebarConfig, isTemporarySidebarConfig } from '../utils/sidebarChecker';
import createEdgeSidebarModel from '../models/Sidebar/Edge/EdgeSidebarModel';
export default (function (state, edgeSidebar, header) {
  return {
    getResultStyle: function getResultStyle(sidebarId) {
      var result = {
        persistent: {},
        permanent: {},
        temporary: {}
      };
      var sidebarConfigMap = edgeSidebar.configMapById[sidebarId];
      if (!sidebarConfigMap) return result;
      var configMap = sidebarConfigMap;
      var breakpoints = combineBreakpoints(configMap, header);
      breakpoints.forEach(function (bp) {
        var config = pickNearestBreakpoint(configMap, bp);

        if (config) {
          var headerEffect = HeaderEffect(pickNearestBreakpoint(header, bp));

          if (isPersistentSidebarConfig(config) && headerEffect) {
            result.persistent[bp] = _extends(_extends({}, createEdgeSidebarModel(config, state)), headerEffect.getEdgeSidebarZIndex(sidebarId));
          } else if (isPermanentSidebarConfig(config) && headerEffect) {
            result.permanent[bp] = _extends(_extends({}, createEdgeSidebarModel(config, state)), headerEffect.getEdgeSidebarZIndex(sidebarId));
          } else if (isTemporarySidebarConfig(config)) {
            result.temporary[bp] = {
              width: config.width
            };
          }
        }
      });
      return result;
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlcnMvRWRnZVNpZGViYXJDb21waWxlci50cyJdLCJuYW1lcyI6WyJIZWFkZXJFZmZlY3QiLCJjb21iaW5lQnJlYWtwb2ludHMiLCJwaWNrTmVhcmVzdEJyZWFrcG9pbnQiLCJpc1Blcm1hbmVudFNpZGViYXJDb25maWciLCJpc1BlcnNpc3RlbnRTaWRlYmFyQ29uZmlnIiwiaXNUZW1wb3JhcnlTaWRlYmFyQ29uZmlnIiwiY3JlYXRlRWRnZVNpZGViYXJNb2RlbCIsInN0YXRlIiwiZWRnZVNpZGViYXIiLCJoZWFkZXIiLCJnZXRSZXN1bHRTdHlsZSIsInNpZGViYXJJZCIsInJlc3VsdCIsInBlcnNpc3RlbnQiLCJwZXJtYW5lbnQiLCJ0ZW1wb3JhcnkiLCJzaWRlYmFyQ29uZmlnTWFwIiwiY29uZmlnTWFwQnlJZCIsImNvbmZpZ01hcCIsImJyZWFrcG9pbnRzIiwiZm9yRWFjaCIsImJwIiwiY29uZmlnIiwiaGVhZGVyRWZmZWN0IiwiZ2V0RWRnZVNpZGViYXJaSW5kZXgiLCJ3aWR0aCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPQSxZQUFQLE1BQXlCLG1CQUF6QjtBQVFBLFNBQVNDLGtCQUFULEVBQTZCQyxxQkFBN0IsUUFBMEQsVUFBMUQ7QUFDQSxTQUNFQyx3QkFERixFQUVFQyx5QkFGRixFQUdFQyx3QkFIRixRQUlPLHlCQUpQO0FBS0EsT0FBT0Msc0JBQVAsTUFBbUMseUNBQW5DO0FBRUEsZ0JBQWUsVUFDYkMsS0FEYSxFQUViQyxXQUZhLEVBR2JDLE1BSGEsRUFJVjtBQUNILFNBQU87QUFDTEMsSUFBQUEsY0FBYyxFQUFFLHdCQUFDQyxTQUFELEVBQWdEO0FBQzlELFVBQU1DLE1BQStCLEdBQUc7QUFDdENDLFFBQUFBLFVBQVUsRUFBRSxFQUQwQjtBQUV0Q0MsUUFBQUEsU0FBUyxFQUFFLEVBRjJCO0FBR3RDQyxRQUFBQSxTQUFTLEVBQUU7QUFIMkIsT0FBeEM7QUFNQSxVQUFNQyxnQkFBZ0IsR0FBR1IsV0FBVyxDQUFDUyxhQUFaLENBQTBCTixTQUExQixDQUF6QjtBQUNBLFVBQUksQ0FBQ0ssZ0JBQUwsRUFBdUIsT0FBT0osTUFBUDtBQUV2QixVQUFNTSxTQUFTLEdBQUdGLGdCQUFsQjtBQUVBLFVBQU1HLFdBQVcsR0FBR2xCLGtCQUFrQixDQUFDaUIsU0FBRCxFQUFZVCxNQUFaLENBQXRDO0FBRUFVLE1BQUFBLFdBQVcsQ0FBQ0MsT0FBWixDQUFvQixVQUFBQyxFQUFFLEVBQUk7QUFDeEIsWUFBTUMsTUFBeUIsR0FBR3BCLHFCQUFxQixDQUFDZ0IsU0FBRCxFQUFZRyxFQUFaLENBQXZEOztBQUNBLFlBQUlDLE1BQUosRUFBWTtBQUNWLGNBQU1DLFlBQVksR0FBR3ZCLFlBQVksQ0FBQ0UscUJBQXFCLENBQUNPLE1BQUQsRUFBU1ksRUFBVCxDQUF0QixDQUFqQzs7QUFDQSxjQUFJakIseUJBQXlCLENBQUNrQixNQUFELENBQXpCLElBQXFDQyxZQUF6QyxFQUF1RDtBQUNyRFgsWUFBQUEsTUFBTSxDQUFDQyxVQUFQLENBQWtCUSxFQUFsQiwwQkFDS2Ysc0JBQXNCLENBQUNnQixNQUFELEVBQVNmLEtBQVQsQ0FEM0IsR0FFS2dCLFlBQVksQ0FBQ0Msb0JBQWIsQ0FBa0NiLFNBQWxDLENBRkw7QUFJRCxXQUxELE1BS08sSUFBSVIsd0JBQXdCLENBQUNtQixNQUFELENBQXhCLElBQW9DQyxZQUF4QyxFQUFzRDtBQUMzRFgsWUFBQUEsTUFBTSxDQUFDRSxTQUFQLENBQWlCTyxFQUFqQiwwQkFDS2Ysc0JBQXNCLENBQUNnQixNQUFELEVBQVNmLEtBQVQsQ0FEM0IsR0FFS2dCLFlBQVksQ0FBQ0Msb0JBQWIsQ0FBa0NiLFNBQWxDLENBRkw7QUFJRCxXQUxNLE1BS0EsSUFBSU4sd0JBQXdCLENBQUNpQixNQUFELENBQTVCLEVBQXNDO0FBQzNDVixZQUFBQSxNQUFNLENBQUNHLFNBQVAsQ0FBaUJNLEVBQWpCLElBQXVCO0FBQ3JCSSxjQUFBQSxLQUFLLEVBQUVILE1BQU0sQ0FBQ0c7QUFETyxhQUF2QjtBQUdEO0FBQ0Y7QUFDRixPQXBCRDtBQXFCQSxhQUFPYixNQUFQO0FBQ0Q7QUFyQ0ksR0FBUDtBQXVDRCxDQTVDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBIZWFkZXJFZmZlY3QgZnJvbSAnLi4vZWZmZWN0cy9IZWFkZXInO1xuaW1wb3J0IHtcbiAgRWRnZVNpZGViYXJDb25maWcsXG4gIEVkZ2VTaWRlYmFyRGF0YSxcbiAgSGVhZGVyQ29uZmlnTWFwLFxuICBFZGdlU2lkZWJhclZhcmlhbnRTdHlsZSxcbiAgU3RhdGUsXG59IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGNvbWJpbmVCcmVha3BvaW50cywgcGlja05lYXJlc3RCcmVha3BvaW50IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHtcbiAgaXNQZXJtYW5lbnRTaWRlYmFyQ29uZmlnLFxuICBpc1BlcnNpc3RlbnRTaWRlYmFyQ29uZmlnLFxuICBpc1RlbXBvcmFyeVNpZGViYXJDb25maWcsXG59IGZyb20gJy4uL3V0aWxzL3NpZGViYXJDaGVja2VyJztcbmltcG9ydCBjcmVhdGVFZGdlU2lkZWJhck1vZGVsIGZyb20gJy4uL21vZGVscy9TaWRlYmFyL0VkZ2UvRWRnZVNpZGViYXJNb2RlbCc7XG5cbmV4cG9ydCBkZWZhdWx0IChcbiAgc3RhdGU6IFN0YXRlLFxuICBlZGdlU2lkZWJhcjogUGljazxFZGdlU2lkZWJhckRhdGEsICdjb25maWdNYXBCeUlkJz4sXG4gIGhlYWRlcjogSGVhZGVyQ29uZmlnTWFwXG4pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBnZXRSZXN1bHRTdHlsZTogKHNpZGViYXJJZDogc3RyaW5nKTogRWRnZVNpZGViYXJWYXJpYW50U3R5bGUgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0OiBFZGdlU2lkZWJhclZhcmlhbnRTdHlsZSA9IHtcbiAgICAgICAgcGVyc2lzdGVudDoge30sXG4gICAgICAgIHBlcm1hbmVudDoge30sXG4gICAgICAgIHRlbXBvcmFyeToge30sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzaWRlYmFyQ29uZmlnTWFwID0gZWRnZVNpZGViYXIuY29uZmlnTWFwQnlJZFtzaWRlYmFySWRdO1xuICAgICAgaWYgKCFzaWRlYmFyQ29uZmlnTWFwKSByZXR1cm4gcmVzdWx0O1xuXG4gICAgICBjb25zdCBjb25maWdNYXAgPSBzaWRlYmFyQ29uZmlnTWFwO1xuXG4gICAgICBjb25zdCBicmVha3BvaW50cyA9IGNvbWJpbmVCcmVha3BvaW50cyhjb25maWdNYXAsIGhlYWRlcik7XG5cbiAgICAgIGJyZWFrcG9pbnRzLmZvckVhY2goYnAgPT4ge1xuICAgICAgICBjb25zdCBjb25maWc6IEVkZ2VTaWRlYmFyQ29uZmlnID0gcGlja05lYXJlc3RCcmVha3BvaW50KGNvbmZpZ01hcCwgYnApO1xuICAgICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgICAgY29uc3QgaGVhZGVyRWZmZWN0ID0gSGVhZGVyRWZmZWN0KHBpY2tOZWFyZXN0QnJlYWtwb2ludChoZWFkZXIsIGJwKSk7XG4gICAgICAgICAgaWYgKGlzUGVyc2lzdGVudFNpZGViYXJDb25maWcoY29uZmlnKSAmJiBoZWFkZXJFZmZlY3QpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wZXJzaXN0ZW50W2JwXSA9IHtcbiAgICAgICAgICAgICAgLi4uY3JlYXRlRWRnZVNpZGViYXJNb2RlbChjb25maWcsIHN0YXRlKSxcbiAgICAgICAgICAgICAgLi4uaGVhZGVyRWZmZWN0LmdldEVkZ2VTaWRlYmFyWkluZGV4KHNpZGViYXJJZCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNQZXJtYW5lbnRTaWRlYmFyQ29uZmlnKGNvbmZpZykgJiYgaGVhZGVyRWZmZWN0KSB7XG4gICAgICAgICAgICByZXN1bHQucGVybWFuZW50W2JwXSA9IHtcbiAgICAgICAgICAgICAgLi4uY3JlYXRlRWRnZVNpZGViYXJNb2RlbChjb25maWcsIHN0YXRlKSxcbiAgICAgICAgICAgICAgLi4uaGVhZGVyRWZmZWN0LmdldEVkZ2VTaWRlYmFyWkluZGV4KHNpZGViYXJJZCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNUZW1wb3JhcnlTaWRlYmFyQ29uZmlnKGNvbmZpZykpIHtcbiAgICAgICAgICAgIHJlc3VsdC50ZW1wb3JhcnlbYnBdID0ge1xuICAgICAgICAgICAgICB3aWR0aDogY29uZmlnLndpZHRoLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICB9O1xufTtcbiJdfQ==