"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.getEdgeSidebarEffect = void 0;

var _PermanentSidebar = require("../PermanentSidebar");

var _PersistentSidebar = require("../PersistentSidebar");

var _sidebarChecker = require("../../utils/sidebarChecker");

var _utils = require("../../utils");

var getEdgeSidebarEffect = function getEdgeSidebarEffect(state, config) {
  if ((0, _sidebarChecker.isPermanentSidebarConfig)(config)) {
    return (0, _PermanentSidebar.createPermanentSidebarEffect)(config, state);
  } else if ((0, _sidebarChecker.isPersistentSidebarConfig)(config)) {
    return (0, _PersistentSidebar.createPersistentSidebarEffect)(config, state);
  }

  return undefined;
};

exports.getEdgeSidebarEffect = getEdgeSidebarEffect;

var _default = function _default(state, edgeSidebar) {
  var configMap = edgeSidebar.configMap,
      configMapById = edgeSidebar.configMapById,
      sidebarIds = edgeSidebar.sidebarIds;
  var breakpoints = Object.keys(configMap);
  var effectsMap = {};
  breakpoints.forEach(function (bp) {
    effectsMap[bp] = []; // iterate all sidebars

    sidebarIds.forEach(function (aSidebarId) {
      var config = (0, _utils.pickNearestBreakpoint)(configMapById[aSidebarId], bp);
      var effect = getEdgeSidebarEffect(state, config);
      if (effect) effectsMap[bp].push(effect);
    });
  });
  return {
    iterateBreakpointEffects: function iterateBreakpointEffects(inputs, getEffects) {
      var foundAllSidebars = false;
      var sidebarCount = sidebarIds.length;
      inputs.forEach(function (bp) {
        var effects = (0, _utils.pickNearestBreakpoint)(effectsMap, bp);

        if (effects) {
          if (!foundAllSidebars && effects.length === sidebarCount) {
            foundAllSidebars = true;
          }

          if (foundAllSidebars && effects.length < sidebarCount) {
            // attach all
            var existingIds = effects.map(function (_ref) {
              var id = _ref.id;
              return id;
            });
            var missingIds = sidebarIds.filter(function (id) {
              return !existingIds.includes(id);
            });
            missingIds.forEach(function (id) {
              effects.push(getEdgeSidebarEffect(state, (0, _utils.pickNearestBreakpoint)(configMapById[id], bp)));
            });
          }

          getEffects(bp, effects);
        } else {
          getEffects(bp, []);
        }
      });
    }
  };
};

exports["default"] = _default;