"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SidebarConsumer = exports.SidebarProvider = exports.useSidebarCtx = void 0;

var _react = _interopRequireDefault(require("react"));

var _utils = require("../utils");

var _sidebarChecker = require("../utils/sidebarChecker");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Context = _react["default"].createContext({
  id: undefined,
  entered: false,
  expanded: false,
  setEntered: function setEntered() {},
  setExpanded: function setExpanded() {}
});

Context.displayName = 'SidebarCtx';
var initialState = {
  entered: false,
  expanded: false
};

var useSidebarCtx = function useSidebarCtx() {
  return _react["default"].useContext(Context);
};

exports.useSidebarCtx = useSidebarCtx;

var SidebarProvider = function SidebarProvider(_ref) {
  var id = _ref.id,
      children = _ref.children,
      config = _ref.config,
      sidebarState = _ref.sidebarState;

  var _React$useState = _react["default"].useState(initialState),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      state = _React$useState2[0],
      setState = _React$useState2[1];

  var isMouseOverSidebar = _react["default"].useRef(false);

  var isAutoExpanded = (0, _sidebarChecker.hasAutoExpanded)(config) && config.autoExpanded;

  var setEntered = _react["default"].useCallback(function (payload) {
    return setState(function (prevState) {
      return _extends(_extends({}, prevState), {}, {
        entered: payload
      });
    });
  }, []);

  var setExpanded = _react["default"].useCallback(function (payload) {
    return setState(function (prevState) {
      return _extends(_extends({}, prevState), {}, {
        expanded: payload
      });
    });
  }, []);

  var wrapOnMouseEnter = _react["default"].useCallback(function (paper) {
    return function () {
      if (paper && typeof paper.onMouseEnter === 'function') {
        paper.onMouseEnter.apply(paper, arguments);
      }

      if (sidebarState.collapsed && isAutoExpanded) {
        isMouseOverSidebar.current = true;
        setTimeout(function () {
          if (isMouseOverSidebar.current) {
            setExpanded(true);
          }
        }, _utils.EDGE_SIDEBAR_EXPAND_DELAY);
      }
    };
  }, [setExpanded, sidebarState.collapsed, isAutoExpanded]);

  var wrapOnMouseLeave = _react["default"].useCallback(function (paper) {
    return function () {
      if (paper && typeof paper.onMouseLeave === 'function') {
        paper.onMouseLeave.apply(paper, arguments);
      }

      isMouseOverSidebar.current = false;
      setExpanded(false);
    };
  }, [setExpanded]);

  var wrapOnEntered = _react["default"].useCallback(function (slide) {
    return function () {
      if (slide && typeof slide.onEntered === 'function') slide.onEntered.apply(slide, arguments);
      setEntered(true);
    };
  }, [setEntered]);

  var wrapOnExit = _react["default"].useCallback(function (slide) {
    return function () {
      if (slide && typeof slide.onExit === 'function') slide.onExit.apply(slide, arguments);
      setEntered(false);
    };
  }, [setEntered]);

  _react["default"].useEffect(function () {
    if (!sidebarState.collapsed) {
      setState(function (prevState) {
        return _extends(_extends({}, prevState), {}, {
          expanded: false
        });
      });
    }
  }, [sidebarState.collapsed]);

  return /*#__PURE__*/_react["default"].createElement(Context.Provider, {
    value: _extends(_extends({
      id: id
    }, state), {}, {
      setEntered: setEntered,
      setExpanded: setExpanded,
      wrapOnMouseEnter: wrapOnMouseEnter,
      wrapOnMouseLeave: wrapOnMouseLeave,
      wrapOnEntered: wrapOnEntered,
      wrapOnExit: wrapOnExit,
      inlineStyle: _extends({}, state.expanded && {
        width: (0, _utils.get)(config, ['width'])
      })
    })
  }, children);
};

exports.SidebarProvider = SidebarProvider;
var SidebarConsumer = Context.Consumer;
exports.SidebarConsumer = SidebarConsumer;