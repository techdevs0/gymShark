"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.LayoutProvider = exports.LayoutConsumer = exports.useLayoutCtx = void 0;

var _react = _interopRequireDefault(require("react"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _builders = _interopRequireDefault(require("../builders"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Context = _react["default"].createContext(null);

Context.displayName = 'MuiLayoutCtx';

var reducer = function reducer(state, action) {
  var newState = _extends({}, state);

  switch (action.type) {
    case 'SET_OPEN':
      newState.sidebar[action.payload.id].open = action.payload.value;
      return newState;

    case 'SET_COLLAPSED':
      newState.sidebar[action.payload.id].collapsed = action.payload.value;
      return newState;

    default:
      return state;
  }
};

var useLayoutCtx = function useLayoutCtx() {
  var ctx = _react["default"].useContext(Context);

  if (!ctx) {
    throw new Error('useLayoutCtx must be rendered under LayoutProvider');
  }

  return ctx;
};

exports.useLayoutCtx = useLayoutCtx;
var LayoutConsumer = Context.Consumer;
exports.LayoutConsumer = LayoutConsumer;
var defaultScheme = (0, _builders["default"])();

var LayoutProvider = function LayoutProvider(_ref) {
  var controlledInitialState = _ref.initialState,
      _ref$scheme = _ref.scheme,
      scheme = _ref$scheme === void 0 ? defaultScheme : _ref$scheme,
      children = _ref.children;
  var autoGenInitialState = scheme.getInitialState();

  var _React$useReducer = _react["default"].useReducer(reducer, (0, _deepmerge["default"])(autoGenInitialState, controlledInitialState || {})),
      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),
      state = _React$useReducer2[0],
      dispatch = _React$useReducer2[1];

  var setOpen = function setOpen(id, value) {
    if (typeof id !== 'string') {
      if (process.env.NODE_ENV !== 'production') {
        throw new Error('To call `setOpen`, You must pass 1st argument(sidebarId) as string');
      }

      return;
    }

    return dispatch({
      type: 'SET_OPEN',
      payload: {
        id: id,
        value: value
      }
    });
  };

  var setCollapsed = function setCollapsed(id, value) {
    if (typeof id !== 'string') {
      if (process.env.NODE_ENV !== 'production') {
        throw new Error('To call `setCollapsed`, You must pass 1st argument(sidebarId) as string');
      }

      return;
    }

    return dispatch({
      type: 'SET_COLLAPSED',
      payload: {
        id: id,
        value: value
      }
    });
  };

  var data = scheme.getComponentData();
  return /*#__PURE__*/_react["default"].createElement(Context.Provider, {
    value: {
      state: state,
      data: data,
      setOpen: setOpen,
      setCollapsed: setCollapsed
    }
  }, children);
};

exports.LayoutProvider = LayoutProvider;
var _default = Context;
exports["default"] = _default;