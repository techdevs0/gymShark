"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.useRelativeHeaders = void 0;

var _useScrollY = _interopRequireDefault(require("./useScrollY"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var useRelativeHeaders = function useRelativeHeaders(headerConfigs, sidebarId) {
  var scrollY = (0, _useScrollY["default"])();
  var relativeConfigs = headerConfigs.filter(function (config) {
    return (0, _utils.isHeaderClipped)(config, sidebarId) && !config.hidden && config.position === 'relative';
  });

  var offset = _utils.plusCalc.apply(void 0, _toConsumableArray(relativeConfigs.map(function (c) {
    return "-".concat((0, _utils.toValidCssValue)(c.initialHeight));
  })));

  return "max(".concat((0, _utils.toValidCssValue)(-scrollY), ", ").concat(offset, ")");
};

exports.useRelativeHeaders = useRelativeHeaders;
var _default = useRelativeHeaders;
exports["default"] = _default;