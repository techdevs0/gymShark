"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHeaderMagnet = void 0;

var _useScrollY = _interopRequireDefault(require("../hooks/useScrollY"));

var _useScreen = _interopRequireDefault(require("../hooks/useScreen"));

var _contexts = require("../contexts");

var _Responsive = require("../shared/Responsive");

var _MultiHeaders = _interopRequireDefault(require("../effects/MultiHeaders"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var useHeaderMagnet = function useHeaderMagnet(sidebarId, dynamicHeight) {
  var scrollY = (0, _useScrollY["default"])();
  var screen = (0, _useScreen["default"])();

  var _useLayoutCtx = (0, _contexts.useLayoutCtx)(),
      _useLayoutCtx$data = _useLayoutCtx.data,
      header = _useLayoutCtx$data.header,
      subheader = _useLayoutCtx$data.subheader;

  var headerConfig = (0, _Responsive.SingleResponsiveObj)(header).getNearestConfig(screen);
  var subheaderConfigs = (0, _Responsive.MultiResponsiveObj)(subheader).getVisibleConfigs(screen);
  if (!dynamicHeight) return {
    marginTop: ''
  }; // document is not ready | component is not mounted | height is 0

  var _MultiHeadersEffect$g = (0, _MultiHeaders["default"])([headerConfig].concat(_toConsumableArray(subheaderConfigs))).getSidebarInteraction(sidebarId),
      maxOffset = _MultiHeadersEffect$g.maxOffset;

  return {
    marginTop: "max(-".concat(scrollY, "px, calc(-1 * ").concat(maxOffset, "))")
  }; // inline style
};

exports.useHeaderMagnet = useHeaderMagnet;