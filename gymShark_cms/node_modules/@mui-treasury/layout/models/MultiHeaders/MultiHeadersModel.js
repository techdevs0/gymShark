"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = require("../../utils");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _default = function _default(configs) {
  var getDefaultValue = function getDefaultValue(value, defaultValue) {
    if (!configs.length) {
      return defaultValue;
    }

    return value;
  };

  return {
    relativeConfigs: configs.filter(function (c) {
      return c.position === 'relative';
    }),
    nonRelativeConfigs: configs.filter(function (c) {
      return c.position !== 'relative';
    }),
    totalHeight: getDefaultValue(configs.length === 1 ? (0, _utils.toValidCssValue)(configs[0].initialHeight) : _utils.plusCalc.apply(void 0, _toConsumableArray(configs.map(function (c) {
      return c.initialHeight;
    }))), 0),
    maxHeightFromTop: getDefaultValue("max(".concat(configs.filter(function (c) {
      return (!c.top || typeof c.top === 'number') && typeof c.initialHeight === 'number';
    }).map(function (c) {
      return (0, _utils.plusCalc)(c.top, c.initialHeight);
    }).join(', '), ")"), 0)
  };
};

exports["default"] = _default;