"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMultiObjBuilder = void 0;

var _createBreakpoints = require("@material-ui/core/styles/createBreakpoints");

var _lodash = _interopRequireDefault(require("lodash.mapvalues"));

var _State = require("../State");

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var createMultiObjBuilder = function createMultiObjBuilder(_ref) {
  var Registry = _ref.Registry,
      component = _ref.component;

  var MultiObjBuilder = function MultiObjBuilder() {
    var initialRpsConfigById = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var state = (0, _State.createMultiObjData)(initialRpsConfigById);

    var getMapById = function getMapById() {
      var mapById = (0, _utils.getFieldById)(state.dataById, 'rpsConfig');
      var hiddenById = (0, _utils.getFieldById)(state.dataById, 'hidden');
      var propsById = (0, _utils.getFieldById)(state.dataById, 'props');
      var finalMapById = (0, _lodash["default"])(mapById, function (value, key) {
        return (0, _lodash["default"])(value, function (nestedValue) {
          return _extends(_extends({}, nestedValue), propsById[key]);
        });
      });
      var attachedMapById = (0, _utils.attachHiddenToMapById)(finalMapById, hiddenById);
      return {
        configMap: (0, _utils.normalizeMapById)(attachedMapById),
        configMapById: attachedMapById
      };
    };

    return {
      create: function create(id, props) {
        if (!state.ids.includes(id)) {
          // throw new Error(
          //   `id: ${id} already exists, please define another unique id`
          // );
          state.ids.push(id);
          state.dataById[id] = (0, _State.createSingleObjData)({
            id: id,
            props: props
          });
        }

        return Registry(state.dataById[id]);
      },
      update: function update(id, updater) {
        if (state.dataById[id]) {
          updater(state.dataById[id].rpsConfig);
        } else {
          console.warn("No sidebar to update. id: ".concat(id));
        }
      },
      hide: function hide(id, breakpoints) {
        if (typeof breakpoints === 'boolean') {
          state.dataById[id].hidden = breakpoints ? _createBreakpoints.keys : [];
        } else {
          state.dataById[id].hidden = breakpoints;
        }
      },
      getData: function getData() {
        return _extends({
          ids: state.ids,
          sidebarIds: state.ids,
          propsById: (0, _utils.getFieldById)(state.dataById, 'props'),
          hiddenById: (0, _utils.getFieldById)(state.dataById, 'hidden')
        }, getMapById());
      },
      debug: function debug() {
        if (process.env.NODE_ENV !== 'production') {
          var data = this.getData();
          state.ids.forEach(function (id) {
            console.group("".concat(component, ": "), "\"".concat(id, "\""));
            console.table(data.configMapById[id]);
            console.table(data.hiddenById[id]);
            console.groupEnd();
          });
        }
      }
    };
  };

  return MultiObjBuilder;
};

exports.createMultiObjBuilder = createMultiObjBuilder;