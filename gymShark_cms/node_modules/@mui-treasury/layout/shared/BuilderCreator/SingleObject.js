"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSingleObjBuilder = void 0;

var _createBreakpoints = require("@material-ui/core/styles/createBreakpoints");

var _State = require("../State");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var makeRegistry = function makeRegistry(id) {
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _State.createSingleObjData)({
      id: id
    });
  };
};

var createSingleObjBuilder = function createSingleObjBuilder(_ref) {
  var defaultId = _ref.defaultId,
      component = _ref.component,
      _ref$Registry = _ref.Registry,
      Registry = _ref$Registry === void 0 ? makeRegistry(defaultId) : _ref$Registry;

  var Builder = function Builder() {
    var initialRpsConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var state = (0, _State.createSingleObjData)({
      id: defaultId,
      rpsConfig: initialRpsConfig
    });
    var registry = Registry(state);
    return _extends(_extends({}, registry), {}, {
      create: function create(id) {
        state = (0, _State.createSingleObjData)({
          id: id
        });
        registry = Registry(state);
        return registry;
      },
      update: function update(updater) {
        updater(state.rpsConfig);
      },
      hide: function hide(breakpoints) {
        if (typeof breakpoints === 'boolean') {
          state.hidden = breakpoints ? _createBreakpoints.keys : [];
        } else {
          state.hidden = breakpoints;
        }
      },
      getId: function getId() {
        return state.id;
      },
      getData: function getData() {
        return state.rpsConfig;
      },
      debug: function debug() {
        if (process.env.NODE_ENV !== 'production') {
          console.group("".concat(component, ": "), "\"".concat(state.id, "\""));
          console.table(state.rpsConfig);
          console.table(state.hidden);
          console.groupEnd();
        }
      }
    });
  };

  return Builder;
};

exports.createSingleObjBuilder = createSingleObjBuilder;