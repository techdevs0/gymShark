import { Breakpoint } from '@material-ui/core/styles/createBreakpoints';
import { RpsConfig, RpsConfigArray } from '../State';
import { DummyRegistry } from './SingleObject';
import { Dictionary } from '../../types';
declare type Params<R> = {
    Registry?: R;
    component?: 'EdgeSidebar' | 'InsetSidebar' | 'Subheader';
};
export declare type ComponentData<Config, Props = {}> = {
    ids: string[];
    sidebarIds: string[];
    propsById: Dictionary<Props>;
    configMapById: Dictionary<RpsConfig<Config & Props>>;
    configMap: RpsConfigArray<Config & Props>;
    hiddenById: Dictionary<Breakpoint[]>;
};
export interface MultiObjBuilderResult<R extends DummyRegistry, Config = undefined, Props = {}> {
    create: (id: string, props: Props) => ReturnType<R>;
    update: (id: string, updater: (rpsConfig: RpsConfig<Config>) => void) => void;
    hide: (id: string, breakpoints: Breakpoint[] | boolean) => void;
    getData: () => ComponentData<Config, Props>;
    debug?: () => void;
}
export declare const createMultiObjBuilder: <R extends DummyRegistry<Config, {}>, Config = undefined, Props = Partial<Config>>({ Registry, component, }: Params<R>) => (initialRpsConfigById?: Dictionary<import("../../types").MapBreakpoint<Config>>) => MultiObjBuilderResult<R, Config, Props>;
export {};
