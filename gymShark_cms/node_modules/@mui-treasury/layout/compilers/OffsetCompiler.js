"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = require("../utils");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _default = function _default(sidebar, header, subheader) {
  return {
    getResultStyle: function getResultStyle(sidebarId, predicate, getHeight) {
      var result = {};
      var found = false;
      var configMap = sidebar.configMapById[sidebarId];

      if (configMap) {
        var breakpoints = (0, _utils.combineBreakpoints)(configMap, header, subheader.configMap);
        breakpoints.forEach(function (bp) {
          var sidebarConfig = (0, _utils.pickNearestBreakpoint)(configMap, bp);
          var headerConfig = (0, _utils.pickNearestBreakpoint)(header, bp);
          var subheaderConfigs = Object.keys(subheader.configMapById).map(function (subheaderId) {
            return (0, _utils.pickNearestBreakpoint)(subheader.configMapById[subheaderId], bp);
          }).filter(function (c) {
            return !!c && !c.hidden;
          });

          if (sidebarConfig) {
            if (predicate(sidebarConfig, headerConfig, subheaderConfigs)) {
              found = true;
              result[bp] = {
                height: getHeight([headerConfig].concat(_toConsumableArray(subheaderConfigs)))
              };
            } else if (found) {
              found = false;
              result[bp] = {
                height: 0
              };
            }
          }
        });
      }

      return result;
    }
  };
};

exports["default"] = _default;