"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Header = _interopRequireDefault(require("../effects/Header"));

var _utils = require("../utils");

var _sidebarChecker = require("../utils/sidebarChecker");

var _EdgeSidebarModel = _interopRequireDefault(require("../models/Sidebar/Edge/EdgeSidebarModel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _default = function _default(state, edgeSidebar, header) {
  return {
    getResultStyle: function getResultStyle(sidebarId) {
      var result = {
        persistent: {},
        permanent: {},
        temporary: {}
      };
      var sidebarConfigMap = edgeSidebar.configMapById[sidebarId];
      if (!sidebarConfigMap) return result;
      var configMap = sidebarConfigMap;
      var breakpoints = (0, _utils.combineBreakpoints)(configMap, header);
      breakpoints.forEach(function (bp) {
        var config = (0, _utils.pickNearestBreakpoint)(configMap, bp);

        if (config) {
          var headerEffect = (0, _Header["default"])((0, _utils.pickNearestBreakpoint)(header, bp));

          if ((0, _sidebarChecker.isPersistentSidebarConfig)(config) && headerEffect) {
            result.persistent[bp] = _extends(_extends({}, (0, _EdgeSidebarModel["default"])(config, state)), headerEffect.getEdgeSidebarZIndex(sidebarId));
          } else if ((0, _sidebarChecker.isPermanentSidebarConfig)(config) && headerEffect) {
            result.permanent[bp] = _extends(_extends({}, (0, _EdgeSidebarModel["default"])(config, state)), headerEffect.getEdgeSidebarZIndex(sidebarId));
          } else if ((0, _sidebarChecker.isTemporarySidebarConfig)(config)) {
            result.temporary[bp] = {
              width: config.width
            };
          }
        }
      });
      return result;
    }
  };
};

exports["default"] = _default;